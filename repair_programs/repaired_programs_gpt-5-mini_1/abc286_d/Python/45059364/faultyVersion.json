{
  "explanation": "The bug was that the inner loop iterated n in increasing order (for n in range(X+1)). That lets DP entries updated earlier in the same coin iteration be used again, effectively allowing unlimited reuse of the same coin and violating the per-coin count limit. Changing the n-loop to iterate from X down to 0 (for n in range(X, -1, -1)) ensures we consult DP values from before processing the current coin amount, so we cannot reuse the same coin more times than allowed.",
  "fixed_code": "N,X=map(int,input().split())\n  \nDP=[0]*(X+1) #DP[n]=現在n円払えるか\nDP[0]=1\nfor i in range(N):\n  a,b=map(int,input().split())\n  for n in range(X, -1, -1):\n    for c in range(1,b+1):\n      if 0<=n-c*a and DP[n-c*a]:\n        DP[n]=1\nprint(\"Yes\" if DP[X] else \"No\")"
}