You are a Python expert.

A user gives you the following Python program which is buggy.

## Problem Description (from dataset)
Score : 200 points

### Problem Statement

There were N participants in a contest. The participant ranked i-th had the nickname S\_i.  
Print the nicknames of the top K participants in **lexicographical order**.

What is lexicographical order?

Simply put, the lexicographical order is the order of words in a dictionary. As a formal description, below is an algorithm to order distinct strings S and T.

Let S\_i denote the i-th character of a string S. We write S \lt T if S is lexicographically smaller than T, and S \gt T if S is larger.

1. Let L be the length of the shorter of S and T. For i=1,2,\dots,L, check whether S\_i equals T\_i.
2. If there is an i such that S\_i \neq T\_i, let j be the smallest such i. Compare S\_j and T\_j. If S\_j is alphabetically smaller than T\_j, we get S \lt T; if S\_j is larger, we get S \gt T.
3. If there is no i such that S\_i \neq T\_i, compare the lengths of S and T. If S is shorter than T, we get S \lt T; if S is longer, we get S \gt T.

### Constraints

* 1 \leq K \leq N \leq 100
* K and N are integers.
* S\_i is a string of length 10 consisting of lowercase English letters.
* S\_i \neq S\_j if i \neq j.

---

### Input

The input is given from Standard Input in the following format:

```
N K
S_1
S_2
\vdots
S_N
```

### Output

Print the nicknames, separated by newlines.

---

### Sample Input 1

```
5 3
abc
aaaaa
xyz
a
def
```

### Sample Output 1

```
aaaaa
abc
xyz
```

This contest had five participants. The participants ranked first, second, third, fourth, and fifth had the nicknames `abc`, `aaaaa`, `xyz`, `a`, and `def`, respectively.

The nicknames of the top three participants were `abc`, `aaaaa`, `xyz`, so print these in lexicographical order: `aaaaa`, `abc`, `xyz`.

---

### Sample Input 2

```
4 4
z
zyx
zzz
rbg
```

### Sample Output 2

```
rbg
z
zyx
zzz
```

---

### Sample Input 3

```
3 1
abc
arc
agc
```

### Sample Output 3

```
abc
```

## Your Analysis (1-sentence bug summary)
The program is sorting all nicknames instead of only the top K participants based on their ranks.

## Buggy Program
n, k = map(int, input().split())
s = [input() for _ in range(n)]
s.sort()
for i in range(k):
  print(s[i])

## Related Known Fixes (retrieved diffs)
### Diff 1
--- 
+++ 
@@ -4,7 +4,7 @@
 
 for i in range(n):
   if a[i] % k == 0:
-      b.append(a[i] / k)
+      b.append(a[i]//k)
 
 b.sort()
 print(*b)

### Diff 2
--- 
+++ 
@@ -3,7 +3,7 @@
 b = []
 for i in range(n):
     if a[i] % k == 0:
-        c = a[i] / k
+        c = a[i] // k
         b.append(c)
 sorted_b = sorted(b)
 print(" ".join(map(str, sorted_b)))

### Diff 3
--- 
+++ 
@@ -3,4 +3,4 @@
 
 for i in range(n):
   if a[i]%k==0:
-    print(a[i]/k, end=" ")
+    print(int(a[i]/k), end=" ")

### Diff 4
--- 
+++ 
@@ -4,7 +4,7 @@
   p,q=map(int, input().split())
   sum+=p*q
 
-if s<sum:
+if s<=sum:
   print(sum)
 else:
   print(sum+k)

### Diff 5
--- 
+++ 
@@ -4,6 +4,6 @@
 
 for i in range(n):
   if a[i] % k == 0:
-    ans.append(a[i]//2)
+    ans.append(a[i]//k)
 
 print(*ans)

Your task:
1) Identify the single incorrect line according to the problem summary and the retrieved diffs.
2) Assume EXACTLY ONE line is wrong.
3) Provide the corrected version of the ENTIRE program, changing only that single line â€” all other lines must remain identical.
4) Do not restructure or rewrite unrelated code.
5) Respond ONLY in JSON format:

{
  "explanation": "Explain what was wrong in that single line and how you fixed it (mention which diff patterns inspired the fix if applicable).",
  "fixed_code": "The FULL program with only that ONE line corrected."
}