You are a Python expert.

A user gives you the following Python program which is buggy.

## Problem Description (from dataset)
Score : 350 points

### Problem Statement

Snuke the doctor prescribed N kinds of medicine for Takahashi. For the next a\_i days (including the day of the prescription), he has to take b\_i pills of the i-th medicine. He does not have to take any other medicine.

Let the day of the prescription be day 1. On or after day 1, when is the first day on which he has to take K pills or less?

### Constraints

* 1 \leq N \leq 3 \times 10^5
* 0 \leq K \leq 10^9
* 1 \leq a\_i,b\_i \leq 10^9
* All input values are integers.

---

### Input

The input is given from Standard Input in the following format:

```
N K
a_1 b_1
\vdots
a_N b_N
```

### Output

If Takahashi has to take K pills or less on day X for the first time on or after day 1, print X.

---

### Sample Input 1

```
4 8
6 3
2 5
1 9
4 2
```

### Sample Output 1

```
3
```

On day 1, he has to take 3,5,9, and 2 pills of the 1-st, 2-nd, 3-rd, and 4-th medicine, respectively. In total, he has to take 19 pills on this day, which is not K(=8) pills or less.  
On day 2, he has to take 3,5, and 2 pills of the 1-st, 2-nd, and 4-th medicine, respectively. In total, he has to take 10 pills on this day, which is not K(=8) pills or less.  
On day 3, he has to take 3 and 2 pills of the 1-st and 4-th medicine, respectively. In total, he has to take 5 pills on this day, which is K(=8) pills or less for the first time.

Thus, the answer is 3.

---

### Sample Input 2

```
4 100
6 3
2 5
1 9
4 2
```

### Sample Output 2

```
1
```

---

### Sample Input 3

```
15 158260522
877914575 2436426
24979445 61648772
623690081 33933447
476190629 62703497
211047202 71407775
628894325 31963982
822804784 50968417
430302156 82631932
161735902 80895728
923078537 7723857
189330739 10286918
802329211 4539679
303238506 17063340
492686568 73361868
125660016 50287940
```

### Sample Output 3

```
492686569
```

## Your Analysis (1-sentence bug summary)
The likely bug in the program is that it incorrectly computes the first day on which the total number of pills taken is K or less, as it checks whether the total pills exceed K instead of meeting the condition of being less than or equal to K.

## Buggy Program
# python3 answer.py < input.txt
# =list(map(int, input().split()))
#=int(input())
#import collections
#import itertools
#import numpy
#from collections import deque
#import heapq
#inf=10**100
#isok=True
#import numpy as np
#np.set_printoptions(suppress=True)
#k=int(input())

#n=int(input())
#lis=[]
n,k=list(map(int, input().split()))


def cal(x,li):
    res=0
    for i in range(n):
        if li[i][0]>=x:
            res+=li[i][1]
    #print(res>k)
    return res>k

maxday=0
lis=[]
for i in range(n):
    a,b=list(map(int, input().split()))
    maxday=max(maxday,a)
    lis.append([a,b])

l=-1
r=maxday

while abs(r-l)>1:
    mid=(l+r)//2
    #print(l,r,mid)
    if cal(mid,lis):#飲む量が多いか
        l=mid
    else:
        r=mid

if r<=0:
    print(1)
else:
    print(r)




## Related Known Fixes (retrieved diffs)
### Diff 1
--- 
+++ 
@@ -36,7 +36,7 @@
             pass
         elif YB < YC:
             if XB == XC:
-                if YB == 0:
+                if YB <= 0:
                     ans += 2
             else:
                 ans += 2

### Diff 2
--- 
+++ 
@@ -14,7 +14,7 @@
             return False
     return True
 
-min_x = max(l)
+min_x = max(l)-1
 max_x = sum(l) + n - 1
 while True:
     mid = (min_x + max_x) // 2

### Diff 3
--- 
+++ 
@@ -29,7 +29,7 @@
 S = input()
 s = set()
 if "p" not in S or "d" not in S:
-    print(S)
+    print("d" * N)
     exit()
 idxP = S.index("p")
 dp = str.maketrans({"d": "p", "p": "d"})

### Diff 4
--- 
+++ 
@@ -73,7 +73,7 @@
 ans[ind] = 1
 for i in range(n-1):
     ans[res[i]] = i+2
-write(" ".join(map(str, ans)))
+write("! " + " ".join(map(str, ans)))
 sys.stdout.flush()
 if TEST:
     assert _a==ans

### Diff 5
--- 
+++ 
@@ -36,7 +36,7 @@
             periodic = int(str_N[:i] * (len_N // i))
             # print(periodic, 1)
             if periodic > N:
-                if int(str_N[:i]) % 10 == 0:
+                if len(str_N[:i]) != len(str(int(str_N[:i]) - 1)):
                     periodic = 0
                 else:
                     periodic = int(str(int(str_N[:i]) - 1) * (len_N // i))

Your task:
1) Identify the single incorrect line according to the problem summary and the retrieved diffs.
2) Assume EXACTLY ONE line is wrong.
3) Provide the corrected version of the ENTIRE program, changing only that single line — all other lines must remain identical.
4) Do not restructure or rewrite unrelated code.
5) Respond ONLY in JSON format:

{
  "explanation": "Explain what was wrong in that single line and how you fixed it (mention which diff patterns inspired the fix if applicable).",
  "fixed_code": "The FULL program with only that ONE line corrected."
}