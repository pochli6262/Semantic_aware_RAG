You are a Python expert.

A user gives you the following Python program which is buggy.

## Problem Description (from dataset)
Score : 400 points

### Problem Statement

There is a sequence A=(A\_0,\ldots,A\_{N-1}) of length N.  
Determine if there exists a tuple of integers (x,y,z,w) that satisfies all of the following conditions:

* 0 \leq x < y < z < w \leq N
* A\_x + A\_{x+1} + \ldots + A\_{y-1} = P
* A\_y + A\_{y+1} + \ldots + A\_{z-1} = Q
* A\_z + A\_{z+1} + \ldots + A\_{w-1} = R

### Constraints

* 3 \leq N \leq 2\times 10^5
* 1 \leq A\_i \leq 10^9
* 1 \leq P,Q,R \leq 10^{15}
* All values in input are integers.

---

### Input

Input is given from Standard Input in the following format:

```
N P Q R
A_0 A_1 \ldots A_{N-1}
```

### Output

If there exists a tuple that satisfies the conditions, print `Yes`; otherwise, print `No`.

---

### Sample Input 1

```
10 5 7 5
1 3 2 2 2 3 1 4 3 2
```

### Sample Output 1

```
Yes
```

(x,y,z,w)=(1,3,6,8) satisfies the conditions.

---

### Sample Input 2

```
9 100 101 100
31 41 59 26 53 58 97 93 23
```

### Sample Output 2

```
No
```

---

### Sample Input 3

```
7 1 1 1
1 1 1 1 1 1 1
```

### Sample Output 3

```
Yes
```

## Your Analysis (1-sentence bug summary)
The likely bug is that the program incorrectly assumes that the cumulative sums satisfy the condition for finding the tuple (x, y, z, w) without ensuring that the indices x, y, z, and w are distinct and in the correct order.

## Buggy Program
# Aの累積和を出すと、Ax がわかれば、あとは　SA[x] + P  SA[x] + P + Q, SA[x] + P + Q + Z 
# の数字が累積和中に出現するか調べればよい　ただそのまま配列を走査すると、O(N)かかり
# X の走査と併せて O(N**2) となってしまうので、累積和の値をset または dict に突っ込んで
# 存在判定するとよい
import numpy

N, P, Q, R = map(int, input().split())
A = list(map(int, input().split()))

SA = numpy.cumsum(A)
sa_set = set()
for sa in SA:
  sa_set.add(sa)
  
for sa in SA:
  if sa + P in sa_set and sa + P + Q in sa_set and sa + P + Q + R in sa_set:
    print("Yes")
    exit()
print("No")

## Related Known Fixes (retrieved diffs)
### Diff 1
--- 
+++ 
@@ -6,7 +6,7 @@
 
 xA = A[2::2]
 sxA = sum(xA)
-xN = abs(abs(x - A[0]) - sxA)
+xN = abs(x - A[0] - sxA)
 xdp = [0] * (xN + 1)
 xdp[0] = 1
 for dx in xA:

### Diff 2
--- 
+++ 
@@ -41,7 +41,7 @@
   A[2]=0
   n=2*(v[4]+v[3])+v[2]+v[1]
   m=5*v[4]+4*v[3]+3*v[2]+2*v[1]+v[0]
-  if n>=A[1] and m>=A[0]:
+  if n>=A[1] and m>=2*A[1]+A[0]:
     print('Yes')
   else:
     print('No')

### Diff 3
--- 
+++ 
@@ -3,7 +3,7 @@
 Aset = set(A)
 ok = False
 for a in A:
-    if X-a in Aset:
+    if a + X in Aset:
         ok = True
         break
 if ok:

### Diff 4
--- 
+++ 
@@ -10,7 +10,7 @@
     print("Yes")
 elif B==C and B!=0:
     print("Yes")
-elif A==0 or D==0: # B=C=0
+elif B==C and (A==0 or D==0): # B=C=0
     print("Yes")
 else:
     print("No")

### Diff 5
--- 
+++ 
@@ -5,7 +5,7 @@
   a=0
   for n in range(N):
     a+=X[n][m]
-  if a<=A[m]:
+  if a<A[m]:
     print ("No")
     exit(0)
 print ('Yes')

Your task:
1) Identify the single incorrect line according to the problem summary and the retrieved diffs.
2) Assume EXACTLY ONE line is wrong.
3) Provide the corrected version of the ENTIRE program, changing only that single line — all other lines must remain identical.
4) Do not restructure or rewrite unrelated code.
5) Respond ONLY in JSON format:

{
  "explanation": "Explain what was wrong in that single line and how you fixed it (mention which diff patterns inspired the fix if applicable).",
  "fixed_code": "The FULL program with only that ONE line corrected."
}