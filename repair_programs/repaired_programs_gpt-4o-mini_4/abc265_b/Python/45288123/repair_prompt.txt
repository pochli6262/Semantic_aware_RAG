You are a Python expert.

A user gives you the following Python program which is buggy.

## Problem Description (from dataset)
Score : 200 points

### Problem Statement

Takahashi is exploring a cave in a video game.

The cave consists of N rooms arranged in a row. The rooms are numbered Room 1,2,\ldots,N from the entrance.

Takahashi is initially in Room 1, and the **time limit** is T.  
For each 1 \leq i \leq N-1, he may consume a time of A\_i to move from Room i to Room (i+1). There is no other way to move between rooms.
He cannot make a move that makes the time limit 0 or less.

There are M bonus rooms in the cave. The i-th bonus room is Room X\_i; when he arrives at the room, the time limit increases by Y\_i.

Can Takahashi reach Room N?

### Constraints

* 2 \leq N \leq 10^5
* 0 \leq M \leq N-2
* 1 \leq T \leq 10^9
* 1 \leq A\_i \leq 10^9
* 1 < X\_1 < \ldots < X\_M < N
* 1 \leq Y\_i \leq 10^9
* All values in input are integers.

---

### Input

Input is given from Standard Input in the following format:

```
N M T
A_1 A_2 \ldots A_{N-1}
X_1 Y_1
X_2 Y_2
\vdots
X_M Y_M
```

### Output

If Takahashi can reach Room N, print `Yes`; otherwise, print `No`.

---

### Sample Input 1

```
4 1 10
5 7 5
2 10
```

### Sample Output 1

```
Yes
```

* Takahashi is initially in Room 1, and the time limit is 10.
* He consumes a time of 5 to move to Room 2. Now the time limit is 5. Then, the time limit increases by 10; it is now 15.
* He consumes a time of 7 to move to Room 3. Now the time limit is 8.
* He consumes a time of 5 to move to Room 4. Now the time limit is 3.

---

### Sample Input 2

```
4 1 10
10 7 5
2 10
```

### Sample Output 2

```
No
```

He cannot move from Room 1 to Room 2.

## Your Analysis (1-sentence bug summary)
The likely bug is that the time limit is updated after moving to the next room, which can lead to an invalid state if the time runs out just before the update.

## Buggy Program
from collections import defaultdict

N, M, T = map(int, input().split())
A = list(map(int, input().split()))
XY = [list(map(int, input().split())) for _ in range(M)]

d = defaultdict(int)
for x, y in XY:
    d[x] = y

now = 1
while now != N:
    T -= A[now-1]
    now += 1

    if T < 0:
        print('No')
        exit()
    
    T += d[now]
    # print(T)

print('Yes')

## Related Known Fixes (retrieved diffs)
### Diff 1
--- 
+++ 
@@ -8,6 +8,8 @@
     s, t = input().split()
     name.append((s, t))
     d[s] += 1
+    if s == t:
+        continue
     d[t] += 1
 
 

### Diff 2
--- 
+++ 
@@ -5,7 +5,7 @@
   a=0
   for n in range(N):
     a+=X[n][m]
-  if a<=A[m]:
+  if a<A[m]:
     print ("No")
     exit(0)
 print ('Yes')

### Diff 3
--- 
+++ 
@@ -10,11 +10,11 @@
 used = set()
 ans = []
 for a in A:
+    idx[a].pop()
     if a in used:
         continue
     while ans and ans[-1] > a and idx[ans[-1]]:
         used.discard(ans.pop())
     ans.append(a)
     used.add(a)
-    idx[a].pop()
 print(*ans)

### Diff 4
--- 
+++ 
@@ -20,7 +20,6 @@
 cnt = 0
 for a in A:
     a -= 1
-
     i = a // n
     j = a % n
     tate[i].discard(a)
@@ -28,7 +27,7 @@
     if i == j:
         naname[0].discard(a)
     if i + j == n - 1:
-        naname[1].discard(tmp)
+        naname[1].discard(a)
     cnt += 1
     if (
         len(tate[i]) == 0

### Diff 5
--- 
+++ 
@@ -23,7 +23,7 @@
         break
     if item[(now[0],now[1])] == 1 and  H < K:
         H = K
-        item[(now[0],now[1])] == 0
+        item[(now[0],now[1])] = 0
 
 else:
     print("Yes")

Your task:
1) Identify the single incorrect line according to the problem summary and the retrieved diffs.
2) Assume EXACTLY ONE line is wrong.
3) Provide the corrected version of the ENTIRE program, changing only that single line â€” all other lines must remain identical.
4) Do not restructure or rewrite unrelated code.
5) Respond ONLY in JSON format:

{
  "explanation": "Explain what was wrong in that single line and how you fixed it (mention which diff patterns inspired the fix if applicable).",
  "fixed_code": "The FULL program with only that ONE line corrected."
}