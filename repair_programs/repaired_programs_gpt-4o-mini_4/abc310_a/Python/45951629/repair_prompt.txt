You are a Python expert.

A user gives you the following Python program which is buggy.

## Problem Description (from dataset)
Score : 100 points

### Problem Statement

Takahashi wants a beverage called AtCoder Drink in a restaurant.
It can be ordered at a regular price of P yen.

He also has a discount coupon that allows him to order it at a lower price of Q yen.
However, he must additionally order one of the restaurant's N dishes to use that coupon.
For each i = 1, 2, \ldots, N, the price of the i-th dish is D\_i yen.

Print the minimum total amount of money that he must pay to get the drink.

### Constraints

* 1 \leq N \leq 100
* 1 \leq Q \lt P \leq 10^5
* 1 \leq D\_i \leq 10^5
* All input values are integers.

---

### Input

The input is given from Standard Input in the following format:

```
N P Q
D_1 D_2 \ldots D_N
```

### Output

Print the answer.

---

### Sample Input 1

```
3 100 50
60 20 40
```

### Sample Output 1

```
70
```

If he uses the coupon and orders the second dish, he can get the drink by paying 50 yen for it and 20 yen for the dish, for a total of 70 yen, which is the minimum total payment needed.

---

### Sample Input 2

```
3 100 50
60000 20000 40000
```

### Sample Output 2

```
100
```

The total payment will be minimized by not using the coupon and paying the regular price of 100 yen.

## Your Analysis (1-sentence bug summary)
The bug likely lies in the calculation of the total cost with the discount, as it incorrectly subtracts Q from P before adding the dish price instead of adding Q to the dish price.

## Buggy Program
N, P, Q = map(int, input().split())
D = list(map(int, input().split()))

ans = P
for i in range(N):
    ret = P - Q + D[i]
    ans = min(ans, ret)

print(ans)


## Related Known Fixes (retrieved diffs)
### Diff 1
--- 
+++ 
@@ -3,7 +3,7 @@
 
 for i in map(int, input().split()):
     ans[i-1] = 0
-for i in range(N-2, 0, -1):
+for i in range(N-1, 0, -1):
     ans[i-1] = min(ans[i-1], ans[i]+1)
 
 print('\n'.join(map(str, ans)))

### Diff 2
--- 
+++ 
@@ -1,6 +1,6 @@
 N, M, P = map(int, input().split())
 
 ans = 0
-if N > M:
+if N >= M:
     ans += 1 + int((N - M) / P)
 print(ans)

### Diff 3
--- 
+++ 
@@ -7,11 +7,11 @@
 for i, p in enumerate(P):
     C[p-1] = i+1
 
-ans = 100000000000
 
 from sortedcontainers import SortedList
 
 s = SortedList(sorted(C[:K]))
+ans = s[-1] - s[0]
 
 for i in range(N-K):
     s.remove(C[i])

### Diff 4
--- 
+++ 
@@ -13,6 +13,6 @@
         ans.append(i)
 
 if len(ans) == 1:
-    print(ans[0])
+    print(ans[0] + 1)
 else:
     print(-1)

### Diff 5
--- 
+++ 
@@ -11,7 +11,7 @@
 
 ans = 0
 if l < r:
-    ans = min(i + 1 + 1, 1 + N - i)
+    ans = min(i + 1 + 1, 1 + N - i - 1)
 else:
     ans = min(i + 1, 2 + N - i - 1)
 

Your task:
1) Identify the single incorrect line according to the problem summary and the retrieved diffs.
2) Assume EXACTLY ONE line is wrong.
3) Provide the corrected version of the ENTIRE program, changing only that single line â€” all other lines must remain identical.
4) Do not restructure or rewrite unrelated code.
5) Respond ONLY in JSON format:

{
  "explanation": "Explain what was wrong in that single line and how you fixed it (mention which diff patterns inspired the fix if applicable).",
  "fixed_code": "The FULL program with only that ONE line corrected."
}