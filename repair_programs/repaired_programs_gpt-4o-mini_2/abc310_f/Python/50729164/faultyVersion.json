{
  "explanation": "The bug was in the calculation of the `nex` variable, specifically in the formula for computing the next state based on the current `bit`. The original line used `bit * (2 ** plus)` which might lead to incorrect bit manipulation. I corrected it to use the bitwise OR operation. This ensures that we are correctly combining the bits to form the new state.",
  "fixed_code": "MOD = 998244353\n\nclass ml(list):\n    def __setitem__(self, key, value):\n        super().__setitem__(key, value%MOD)\n\nn = int(input())\na = list(map(int, input().split()))\ndp = [ml([0] * (1<<10)) for _ in range(n+1)]\ndp[0][0] = 1\n\nfor i in range(n):\n    inv = pow(a[i], -1, MOD)\n    for bit in range(1<<10):\n        if dp[i][bit] == 0: continue\n        for plus in range(1, min(11, a[i]+1)):\n            nex = (bit | (1 << plus) - 1) % (1 << 10)\n            dp[i+1][nex] += dp[i][bit] * inv\n\nans = 0\nfor bit in range(1<<10):\n    if bit & (1<<9): ans = (ans + dp[n][bit]) % MOD\nprint(ans)"
}