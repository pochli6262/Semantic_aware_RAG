You are a Python expert.

A user gives you the following Python program which is buggy.

## Problem Description (from dataset)
Score : 400 points

### Problem Statement

There is a sequence A=(A\_0,\ldots,A\_{N-1}) of length N.  
Determine if there exists a tuple of integers (x,y,z,w) that satisfies all of the following conditions:

* 0 \leq x < y < z < w \leq N
* A\_x + A\_{x+1} + \ldots + A\_{y-1} = P
* A\_y + A\_{y+1} + \ldots + A\_{z-1} = Q
* A\_z + A\_{z+1} + \ldots + A\_{w-1} = R

### Constraints

* 3 \leq N \leq 2\times 10^5
* 1 \leq A\_i \leq 10^9
* 1 \leq P,Q,R \leq 10^{15}
* All values in input are integers.

---

### Input

Input is given from Standard Input in the following format:

```
N P Q R
A_0 A_1 \ldots A_{N-1}
```

### Output

If there exists a tuple that satisfies the conditions, print `Yes`; otherwise, print `No`.

---

### Sample Input 1

```
10 5 7 5
1 3 2 2 2 3 1 4 3 2
```

### Sample Output 1

```
Yes
```

(x,y,z,w)=(1,3,6,8) satisfies the conditions.

---

### Sample Input 2

```
9 100 101 100
31 41 59 26 53 58 97 93 23
```

### Sample Output 2

```
No
```

---

### Sample Input 3

```
7 1 1 1
1 1 1 1 1 1 1
```

### Sample Output 3

```
Yes
```

## Your Analysis (1-sentence bug summary)
The code uses input()[:-1] to strip the line ending, which can accidentally drop the last character of the line (e.g. the last digit) when there's no trailing newline, leading to incorrect parsing of the integers.

## Buggy Program
import sys
sys.setrecursionlimit(500*500)

# if 'pypyjit' in sys.builtin_module_names:
#     import pypyjit
#     pypyjit.set_param('max_unroll_recursion=-1')
input = sys.stdin.readline
from math import gcd
from functools import reduce
# product('ABCD', repeat=2) => AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD
from itertools import product
# permutations('ABCD', 2) => AB AC AD BA BC BD CA CB CD DA DB DC
from itertools import permutations
# combinations('ABCD', 2) => AB AC AD BC BD CD
from itertools import combinations
from itertools import accumulate # 累積和作るやつ
from collections import deque
from collections import defaultdict
from heapq import heappop, heappush
from bisect import bisect_left
# 0埋めされた二進数表現
f'{9:05b}'

alpha2num = lambda c: ord(c) - ord('a')
num2alpha = lambda c: chr(c+97)
popcnt = lambda x: bin(x).count("1")

# 数値判定
"1".isdigit()


dh = [-1, 0, 1, 0]
dw = [0, -1, 0, 1]
dh8 = [-1, -1, -1,  0,  0,  1,  1,  1]
dw8 = [-1,  0,  1, -1,  1, -1,  0,  1]

def resolve():
  inf = 10**18+1
  N, P, Q, R = map(int, input()[:-1].split(" "))
  A = [int(x) for x in input()[:-1].split(" ")]
  acc = [0] + list(accumulate(A))
  setAcc = set(acc)
  for x in range(N-3):
    base = acc[x]
    if base + P not in setAcc: continue
    if base + P + Q not in setAcc: continue
    if base + P + Q + R not in setAcc: continue
    print("Yes")
    return


  print("No")

resolve()


## Related Known Fixes (retrieved diffs)
### Diff 1
--- 
+++ 
@@ -54,6 +54,6 @@
         C -= d
         c_ -= d
         if c_ > 0:
-          que.append((x, c_))
+          que.appendleft((x, c_))
       print(ans)
 resolve()

### Diff 2
--- 
+++ 
@@ -34,7 +34,7 @@
 under = [
     ["_" * j for j in i]
     for i in product(list(range(1, 16 - total_length + 1)), repeat=N - 1)
-    if 3 <= sum(i) <= 16 - total_length
+    if sum(i) <= 16 - total_length
 ]
 
 for i in permutations(S):

### Diff 3
--- 
+++ 
@@ -42,6 +42,8 @@
 
 for i, j in names:
     if counter[i] > 1 and counter[j] > 1:
+        if i == j and counter[i] == 2:
+            continue
         print("No")
         exit()
 

### Diff 4
--- 
+++ 
@@ -30,7 +30,7 @@
     if m%2==1:
         yn(all(Cnt[i]==0 for i in Cnt.keys()),'Bob','Alice')
     else:
-        yn(all((Cnt[i]==1 and Cnt[(i+(m//2))%m]==1) or (Cnt[i]==0 and Cnt[(i+(m//2))%m]==0) for i in Cnt.keys()),'Bob','Alice')
+        yn(all((Cnt[i]==1 and Cnt[(i+(m//2))%m]==1) or (Cnt[i]==0 and Cnt[(i+(m//2))%m]==0) for i in Cnt.keys()) and sum(Cnt.values())%4==0,'Bob','Alice')
     
 
 

### Diff 5
--- 
+++ 
@@ -33,5 +33,5 @@
 for i in range(N):rdp[i+1]=min(rdp[i]+A[i],R*(i+1))
 rdp.reverse()
 ans=float('inf')
-for i in range(1,N+1):ans=min(ans,ldp[i]+rdp[i])
+for i in range(N+1):ans=min(ans,ldp[i]+rdp[i])
 print(ans)

Your task:
1) Identify the single incorrect line according to the problem summary and the retrieved diffs.
2) Assume EXACTLY ONE line is wrong.
3) Provide the corrected version of the ENTIRE program, changing only that single line — all other lines must remain identical.
4) Do not restructure or rewrite unrelated code.
5) Respond ONLY in JSON format:

{
  "explanation": "Explain what was wrong in that single line and how you fixed it (mention which diff patterns inspired the fix if applicable).",
  "fixed_code": "The FULL program with only that ONE line corrected."
}