You are a Python expert.

A user gives you the following Python program which is buggy.

## Problem Description (from dataset)
Score : 400 points

### Problem Statement

Your computer has a keyboard with three keys: 'a' key, Shift key, and Caps Lock key. The Caps Lock key has a light on it.
Initially, the light on the Caps Lock key is off, and the screen shows an empty string.

You can do the following three actions any number of times in any order:

* Spend X milliseconds to press only the 'a' key. If the light on the Caps Lock key is off, `a` is appended to the string on the screen; if it is on, `A` is.
* Spend Y milliseconds to press the 'a' key and Shift key simultaneously. If the light on the Caps Lock key is off, `A` is appended to the string on the screen; if it is on, `a` is.
* Spend Z milliseconds to press the Caps Lock key. If the light on the Caps Lock key is off, it turns on; if it is on, it turns off.

Given a string S consisting of `A` and `a`, determine at least how many milliseconds you need to spend to make the string shown on the screen equal to S.

### Constraints

* 1 \leq X,Y,Z \leq 10^9
* X, Y, and Z are integers.
* 1 \leq |S| \leq 3 \times 10^5
* S is a string consisting of `A` and `a`.

---

### Input

The input is given from Standard Input in the following format:

```
X Y Z
S
```

### Output

Print the answer.

---

### Sample Input 1

```
1 3 3
AAaA
```

### Sample Output 1

```
9
```

The following sequence of actions makes the string on the screen equal to `AAaA` in 9 milliseconds, which is the shortest possible.

* Spend Z(=3) milliseconds to press the CapsLock key. The light on the Caps Lock key turns on.
* Spend X(=1) milliseconds to press the 'a' key. `A` is appended to the string on the screen.
* Spend X(=1) milliseconds to press the 'a' key. `A` is appended to the string on the screen.
* Spend Y(=3) milliseconds to press the Shift key and 'a' key simultaneously. `a` is appended to the string on the screen.
* Spend X(=1) milliseconds to press the 'a' key. `A` is appended to the string on the screen.

---

### Sample Input 2

```
1 1 100
aAaAaA
```

### Sample Output 2

```
6
```

---

### Sample Input 3

```
1 2 4
aaAaAaaAAAAaAaaAaAAaaaAAAAA
```

### Sample Output 3

```
40
```

## Your Analysis (1-sentence bug summary)
The DP has its caps-lock states reversed (so X and Y are used in swapped places), causing the initialization and transitions to apply the wrong costs for 'a' versus Shift+'a'.

## Buggy Program
x, y, z = map(int, input().split())
s = input()

dp = [[0]*(len(s)) for _ in range(2)]
if s[0] == "A":
    dp[0][0] = z+x
    dp[1][0] = y
else:
    dp[0][0] = z+y
    dp[1][0] = x
for j in range(1, len(s)):
    if s[j] == "A":
        dp[0][j] = min(dp[0][j-1]+x, dp[1][j-1]+z+x)

        dp[1][j] = min(dp[0][j-1]+z+x, dp[1][j-1]+y)

    else:
        dp[0][j] = min(dp[0][j-1]+y, dp[1][j-1]+z+y)
        dp[1][j] = min(dp[0][j-1]+z+x, dp[1][j-1]+x)
print(min(dp[0][-1], dp[1][-1]))

## Related Known Fixes (retrieved diffs)
### Diff 1
--- 
+++ 
@@ -1,3 +1,3 @@
 s=input()
 a,b=map(int,input().split())
-print(s[:a-1]+s[b-1]+s[a:b-2]+s[a-1]+s[b:])
+print(s[:a-1]+s[b-1]+s[a:b-1]+s[a-1]+s[b:])

### Diff 2
--- 
+++ 
@@ -13,7 +13,7 @@
         if s[l] == 'o':
             for mid in range(l + 1, r):
                 if s[mid] == 'f' and dp[l + 1][mid] == 0:
-                    mi = min(mi, dp[l + 1][mid] + dp[min(r, mid + k + 1)][r])
+                    mi = min(mi, dp[l + 1][mid] + max(0, dp[mid + 1][r] - k))
         dp[l][r] = mi
 
 print(dp[0][n])

### Diff 3
--- 
+++ 
@@ -1,5 +1,6 @@
 N,D = map(int, input().split())
 A =[int(i) for i in input().split()]
+
 
 mod = 998244353
 S = 1<<(2*D+2)
@@ -21,7 +22,7 @@
             if s&1==0:
                 continue
             t = s>>1
-            for diff in range(0,2*D+2):
+            for diff in range(0,2*D+1):
                 if t>>diff&1:
                     continue
                 dp[i+1][t|(1<<diff)] += dp[i][s]

### Diff 4
--- 
+++ 
@@ -11,7 +11,7 @@
     d.append(a-b)
     s-=b
 
-if s<=0:
+if s<0:
   print("No")
   exit()
 

### Diff 5
--- 
+++ 
@@ -15,7 +15,7 @@
 ans = []
 for s, t in zip(S, T):
     if s == t:
-        ans.append(s)
+        ans.append("0")
     elif ds > 0 and s == "1":
         ans.append("0")
         ds -= 1

Your task:
1) Identify the single incorrect line according to the problem summary and the retrieved diffs.
2) Assume EXACTLY ONE line is wrong.
3) Provide the corrected version of the ENTIRE program, changing only that single line â€” all other lines must remain identical.
4) Do not restructure or rewrite unrelated code.
5) Respond ONLY in JSON format:

{
  "explanation": "Explain what was wrong in that single line and how you fixed it (mention which diff patterns inspired the fix if applicable).",
  "fixed_code": "The FULL program with only that ONE line corrected."
}