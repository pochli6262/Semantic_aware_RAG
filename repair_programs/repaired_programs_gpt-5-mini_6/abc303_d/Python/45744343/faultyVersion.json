{
  "explanation": "The DP in the program treats dp[0] and dp[1] with reversed CapsLock semantics, so the costs for 'a' (X) and Shift+'a' (Y) are effectively swapped throughout. Instead of changing many lines, a single fix is to swap the variables when reading input so the rest of the code uses the correct cost meanings. I fixed the first line to read the inputs into (y, x, z) instead of (x, y, z), thereby restoring the intended mapping of X and Y to the DP logic.",
  "fixed_code": "y, x, z = map(int, input().split())\ns = input()\n\ndp = [[0]*(len(s)) for _ in range(2)]\nif s[0] == \"A\":\n    dp[0][0] = z+x\n    dp[1][0] = y\nelse:\n    dp[0][0] = z+y\n    dp[1][0] = x\nfor j in range(1, len(s)):\n    if s[j] == \"A\":\n        dp[0][j] = min(dp[0][j-1]+x, dp[1][j-1]+z+x)\n\n        dp[1][j] = min(dp[0][j-1]+z+x, dp[1][j-1]+y)\n\n    else:\n        dp[0][j] = min(dp[0][j-1]+y, dp[1][j-1]+z+y)\n        dp[1][j] = min(dp[0][j-1]+z+x, dp[1][j-1]+x)\nprint(min(dp[0][-1], dp[1][-1]))"
}