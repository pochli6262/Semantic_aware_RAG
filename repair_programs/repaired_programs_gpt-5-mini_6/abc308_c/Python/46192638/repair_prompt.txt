You are a Python expert.

A user gives you the following Python program which is buggy.

## Problem Description (from dataset)
Score : 300 points

### Problem Statement

N people numbered 1 through N tossed a coin several times. We know that person i's tosses resulted in A\_i heads and B\_i tails.

Person i's **success rate** of the tosses is defined by \displaystyle\frac{A\_i}{A\_i+B\_i}. Sort people 1,\ldots,N in descending order of their success rates, with ties broken in ascending order of their assigned numbers.

### Constraints

* 2\leq N \leq 2\times 10^5
* 0\leq A\_i, B\_i\leq 10^9
* A\_i+B\_i \geq 1
* All input values are integers.

---

### Input

The input is given from Standard Input in the following format:

```
N
A_1 B_1
\vdots
A_N B_N
```

### Output

Print the numbers of people 1,\ldots,N in descending order of their success rates, with ties broken in ascending order of their assigned numbers.

---

### Sample Input 1

```
3
1 3
3 1
2 2
```

### Sample Output 1

```
2 3 1
```

Person 1's success rate is 0.25, person 2's is 0.75, and person 3's is 0.5.

Sort them in descending order of their success rates to obtain the order in Sample Output.

---

### Sample Input 2

```
2
1 3
2 6
```

### Sample Output 2

```
1 2
```

Note that person 1 and 2 should be printed in ascending order of their numbers, as they have the same success rates.

---

### Sample Input 3

```
4
999999999 1000000000
333333333 999999999
1000000000 999999997
999999998 1000000000
```

### Sample Output 3

```
3 1 4 2
```

## Your Analysis (1-sentence bug summary)
The code converts the success rates to floating-point via multiplying by 10**100 and dividing, which can overflow or lose precision and thus produce incorrect ordering for large A_i/B_i values.

## Buggy Program
import sys

input = sys.stdin.readline
# sys.setrecursionlimit(10**6)

def main():
    N = int(input())
    l = []
    for i in range(N):
        a, b = map(int, input().split())
        l.append((-a * 10 ** 100 / (a + b), i + 1))
    l.sort()
    for i in range(N):
        print(l[i][1], end=' ')
    print()

if __name__ == '__main__':
    main()


## Related Known Fixes (retrieved diffs)
### Diff 1
--- 
+++ 
@@ -8,6 +8,9 @@
     S = input()
 
     for i in range(1, N + 1):
+        if N % i:
+            continue
+
         D = [[0 for _ in range(26)] for _ in range(i)]
         T = [0 for _ in range(i)]
 

### Diff 2
--- 
+++ 
@@ -13,7 +13,7 @@
     ans = '4' * (N // 4)
 
     if N % 4:
-        ans += str(N % 4)
+        ans = str(N % 4) + ans
     
     print(ans)
 

### Diff 3
--- 
+++ 
@@ -8,7 +8,7 @@
 A = sorted(int(input()) for _ in range(N))
 ans = 0
 
-for i in range(N-1):
+for i in range(N):
   for j in range(i, N):
     x = A[i] * A[j]
     idx = bisect_left(A, x)

### Diff 4
--- 
+++ 
@@ -16,7 +16,7 @@
 x = A[-1]
 for i in range(N-1):
     if A[i]>A[i+1]:
-        x = i
+        x = A[i]
         break
 
 a = f(x)

### Diff 5
--- 
+++ 
@@ -2,6 +2,6 @@
 array = []
 for i in sys.stdin.readlines():
     array.append(int(i.rstrip()))
-array.sort()
+array.reverse()
 for i in array:
     print(i)

Your task:
1) Identify the single incorrect line according to the problem summary and the retrieved diffs.
2) Assume EXACTLY ONE line is wrong.
3) Provide the corrected version of the ENTIRE program, changing only that single line â€” all other lines must remain identical.
4) Do not restructure or rewrite unrelated code.
5) Respond ONLY in JSON format:

{
  "explanation": "Explain what was wrong in that single line and how you fixed it (mention which diff patterns inspired the fix if applicable).",
  "fixed_code": "The FULL program with only that ONE line corrected."
}