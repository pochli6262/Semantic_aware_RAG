{
  "explanation": "The original if only checked the case where the three-of-a-kind is in the first three sorted cards (cards[0..2]) and the pair is in the last two (cards[3..4]). It missed the symmetrical case where the pair is in the first two and the three-of-a-kind is in the last three. I fixed the single conditional line by OR-ing a second condition that detects the triple in positions 2â€“4 (cards[2..4]) and ensures the pair and triple are of different values. This is analogous to the diffs that add an alternative branch/condition to cover the missing case.",
  "fixed_code": "def main():\n    cards = list(map(int, input().split()))\n    assert len(cards) == 5\n\n    cards.sort()\n    if (cards[0] == cards[1] and cards[0] == cards[2] and cards[0] != cards[3] and cards[3] == cards[4]) or (cards[0] == cards[1] and cards[2] == cards[3] and cards[2] == cards[4] and cards[1] != cards[2]):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
}