You are a Python repair assistant.

A user gives you the following buggy program.

## Buggy Program
import sys
from collections import defaultdict
MOD = 998_244_353
INF = 10**18

N, Q = map(int, sys.stdin.readline().rstrip().split())
A = list(map(int, sys.stdin.readline().rstrip().split()))
D = defaultdict(list)
for i in range(N):
    D[A[i]].append(i + 1)

print(D)

for q in range(Q):
    x, k = list(map(int, sys.stdin.readline().rstrip().split()))
    if len(D[x]) >= k:
        print(D[x][k - 1])
    else:
        print(-1)


## Related Example Fixes (retrieved from similar problems)
These examples are only references. 
They must NOT be copied directly, but can inspire how similar bugs were fixed.

### Example 1
--- Buggy Code ---
import sys
input = sys.stdin.readline
from collections import deque,Counter

N,K=map(int,input().split())
A=sorted(map(int,input().split()))
C=Counter(A)

mod=998244353

FACT=[1]
for i in range(1,N+10):
    FACT.append(FACT[-1]*i%mod)

now=1
Q=deque(A)
ANS=1

while Q:
    if Q[-1]+Q[0]>=K:
        Q.pop()
        ANS=ANS*now%mod
        now+=1
    else:
        Q.popleft()
        ANS=ANS*now%mod
        now-=1
        
for v in C.values():
    if v==1:
        continue
    ANS=ANS*pow(v,mod-2,mod)%mod

print(ANS)

--- Correct Code ---
import sys
input = sys.stdin.readline
from collections import deque,Counter

N,K=map(int,input().split())
A=sorted(map(int,input().split()))
C=Counter(A)

mod=998244353

FACT=[1]
for i in range(1,N+10):
    FACT.append(FACT[-1]*i%mod)

now=1
Q=deque(A)
ANS=1

while Q:
    if Q[-1]+Q[0]>=K:
        Q.pop()
        ANS=ANS*now%mod
        now+=1
    else:
        Q.popleft()
        ANS=ANS*now%mod
        now-=1
     
for v in C.values():
    if v==1:
        continue
    ANS=ANS*pow(FACT[v],mod-2,mod)%mod

print(ANS)


### Example 2
--- Buggy Code ---
import sys
from collections import Counter, defaultdict, deque
from itertools import accumulate, combinations, permutations
from heapq import heappop, heappush
from math import inf
sys.setrecursionlimit(10**6)
MOD = 998244353

stdin = sys.stdin

ni = lambda: int(ns())
na = lambda: list(map(int, stdin.readline().split()))
ns = lambda: stdin.readline().rstrip()  # ignore trailing spaces

q,k = na()
dp = [0]*(k+1)
dp[0] = 1
for _ in range(q):
    query = ns().split()
    t = query[0]
    x = int(query[1])
    if t == '+':
        for i in range(k,-1,-1):
            if i-x < 0: break
            dp[i] += dp[i-x]
    else:
        assert t == '-'
        for i in range(k+1):
            if i-x < 0: continue
            dp[i] -= dp[i-x]
    # print(t,x,dp)
    print(dp[k])


--- Correct Code ---
import sys
from collections import Counter, defaultdict, deque
from itertools import accumulate, combinations, permutations
from heapq import heappop, heappush
from math import inf
sys.setrecursionlimit(10**6)
MOD = 998244353

stdin = sys.stdin

ni = lambda: int(ns())
na = lambda: list(map(int, stdin.readline().split()))
ns = lambda: stdin.readline().rstrip()  # ignore trailing spaces

q,k = na()
dp = [0]*(k+1)
dp[0] = 1
for _ in range(q):
    query = ns().split()
    t = query[0]
    x = int(query[1])
    if t == '+':
        for i in range(k,-1,-1):
            if i-x < 0: break
            dp[i] += dp[i-x]
    else:
        assert t == '-'
        for i in range(k+1):
            if i-x < 0: continue
            dp[i] -= dp[i-x]
    # print(t,x,dp)
    print(dp[k]%MOD)


### Example 3
--- Buggy Code ---
import sys
input = lambda: sys.stdin.readline().rstrip()
mod = 9982444353

#  -----------------------  #

Q, K = map(int, input().split())
dp = [0] * (K+1)
dp[0] = 1

for i in range(Q):
  com, x = input().split()
  x = int(x)
  if com == '+':
    for j in range(K, x-1, -1):
      dp[j] += dp[j-x]
      dp[j] %= mod
  else:
    for j in range(x, K+1):
      dp[j] -= dp[j-x]
      dp[j] %= mod
  print(dp[K])


--- Correct Code ---
import sys
input = lambda: sys.stdin.readline().rstrip()
mod = 998244353

#  -----------------------  #

Q, K = map(int, input().split())
dp = [0] * (K+1)
dp[0] = 1

for i in range(Q):
  com, x = input().split()
  x = int(x)
  if com == '+':
    for j in range(K, x-1, -1):
      dp[j] += dp[j-x]
      dp[j] %= mod
  else:
    for j in range(x, K+1):
      dp[j] -= dp[j-x]
      dp[j] %= mod
  print(dp[K])


Your task:
1) Identify the single incorrect line in the buggy program.
2) Assume EXACTLY ONE line is wrong.
3) Provide the corrected version of the ENTIRE program, changing only that single line.
4) Do not restructure or rewrite unrelated code.
5) Respond ONLY in JSON format:

{
  "explanation": "Explain the bug and how you fixed it.",
  "fixed_code": "The FULL program with only that ONE line corrected."
}