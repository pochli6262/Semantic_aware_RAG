You are a Python repair assistant.

A user gives you the following buggy program.

## Buggy Program
n, k = map(int, input().split())
ab = [list(map(int, input().split())) for _ in range(n)]


def calc(num):
    global ab
    res = 0
    for j in range(n):
        if ab[j][0] <= num:
            continue
        res += ab[j][1]
    return res


l = -1
r = 9999999999999999
m = 0
while r > l + 1:
    m = (r + l) // 2
    if calc(m) < k:
        r = m
    else:
        l = m
print(r + 1)


## Related Example Fixes (retrieved from similar problems)
These examples are only references. 
They must NOT be copied directly, but can inspire how similar bugs were fixed.

### Example 1
--- Buggy Code ---
n = int(input())


def calc(num):
    moji = str(num)
    keta = len(moji)
    ret = 0
    for i in range(keta):
        p = int(moji[i])
        if i == 0:
            d = max(p - 1, 0)
            ret = ret + d * 9 ** (keta - i - 1)
        else:
            d = p + 1
            if d-1 > int(moji[i - 1]):
                d = d - 1
            elif d-1 == int(moji[i - 1]):
                ret = ret + (d-1) * 9 ** (keta - i - 1)
                for i in range(1, keta):
                    ret += 9 ** i
                return ret
            d = max(d - 1, 0)
            ret = ret + d * 9 ** (keta - i - 1)
    for i in range(1, keta):
        ret += 9 ** i
    return ret + 1


for _ in range(n):
    num = int(input())
    l = 0
    r = 10 ** 12
    md = (l + r) // 2
    while l + 1 < r:
        ret = calc(md)
        if ret >= num:
            r = md
        else:
            l = md
        md = (l + r) // 2
    print(r)




--- Correct Code ---
n = int(input())


def calc(num):
    moji = str(num)
    keta = len(moji)
    ret = 0
    for i in range(keta):
        p = int(moji[i])
        if i == 0:
            d = max(p - 1, 0)
            ret = ret + d * 9 ** (keta - i - 1)
        else:
            d = p + 1
            if d-1 > int(moji[i - 1]):
                d = d - 1
            elif d-1 == int(moji[i - 1]):
                ret = ret + (d-1) * 9 ** (keta - i - 1)
                for i in range(1, keta):
                    ret += 9 ** i
                return ret
            d = max(d - 1, 0)
            ret = ret + d * 9 ** (keta - i - 1)
    for i in range(1, keta):
        ret += 9 ** i
    return ret + 1


for _ in range(n):
    num = int(input())
    l = 0
    r = 10 ** 16
    md = (l + r) // 2
    while l + 1 < r:
        ret = calc(md)
        if ret >= num:
            r = md
        else:
            l = md
        md = (l + r) // 2
    print(r)


### Example 2
--- Buggy Code ---
n=int(input())
for _ in range(n):
  n, m,k = map(int, input().split())
  if n==m-1==k:
    print(0)
    continue
  if n >= m:
    sa=n-m
    num=sa//(m-k)+1
    n=n-num*(m-k)
 
  print(pow(2,n,10))

--- Correct Code ---
n=int(input())
for _ in range(n):
  n, m,k = map(int, input().split())
  if m-1==k and n>=m-1:
    print(0)
    continue
  if n >= m:
    sa=n-m
    num=sa//(m-k)+1
    n=n-num*(m-k)
 
  print(pow(2,n,10))


### Example 3
--- Buggy Code ---
n, l, r = map(int, input().split())


def calc(x):
    ret = []
    val = 0
    for i in range(n):
        if x < n - 1 - i:
            val = i
            break
        x -= n - 1 - i

    for i in range(val):
        ret.append(n - 1 - i)

    for i in range(val, n):
        ret.append(i - val)

    for i in range(x):
        ret[val], ret[val + i + 1] = ret[val + i + 1], ret[val]

    return ret


x = calc(l - 1)
y = calc(r)


idx_x = [0] * n
idx_y = [0] * n

for i in range(n):
    idx_x[x[i]] = i
    idx_y[y[i]] = i

ans = [0] * n

for i in range(n):
    ans[i] = idx_x[y[i]]

print(*[x + 1 for x in ans])


--- Correct Code ---
n, l, r = map(int, input().split())


def calc(x):
    ret = []
    val = n
    for i in range(n):
        if x < n - 1 - i:
            val = i
            break
        x -= n - 1 - i

    for i in range(val):
        ret.append(n - 1 - i)

    for i in range(val, n):
        ret.append(i - val)

    for i in range(x):
        ret[val], ret[val + i + 1] = ret[val + i + 1], ret[val]

    return ret


x = calc(l - 1)
y = calc(r)


idx_x = [0] * n
idx_y = [0] * n

for i in range(n):
    idx_x[x[i]] = i
    idx_y[y[i]] = i

ans = [0] * n

for i in range(n):
    ans[i] = idx_x[y[i]]

print(*[x + 1 for x in ans])


Your task:
1) Identify the single incorrect line in the buggy program.
2) Assume EXACTLY ONE line is wrong.
3) Provide the corrected version of the ENTIRE program, changing only that single line.
4) Do not restructure or rewrite unrelated code.
5) Respond ONLY in JSON format:

{
  "explanation": "Explain the bug and how you fixed it.",
  "fixed_code": "The FULL program with only that ONE line corrected."
}