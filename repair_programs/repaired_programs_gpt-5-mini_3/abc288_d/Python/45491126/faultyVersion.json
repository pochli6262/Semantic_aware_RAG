{
  "explanation": "The bug was in the index calculation for the left prefix when computing the sum of elements in each residue class. Because of operator precedence, max(0, l-k-1)//K+1 evaluated the // before max was applied, producing incorrect indices (it yielded 1 instead of 0 in some cases). I fixed that by applying max to the whole computed index: max(0, (l-k-1)//K + 1).",
  "fixed_code": "N, K = map(int,input().split())\nA=list(map(int,input().split()))\nQ=int(input())\nS = [[0] for i in range(K)]\nfor i in range(N):\n    S[i%K].append(S[i%K][-1]+A[i])\n    \nfor i in range(Q):\n    l, r = map(lambda x:int(x)-1,input().split())\n    s=set()\n    for k in range(K):\n        s.add(S[k][(r-k)//K + 1] - S[k][max(0, (l-k-1)//K + 1)])\n    if len(s)==1:\n        print('Yes')\n    else:\n        print('No')"
}