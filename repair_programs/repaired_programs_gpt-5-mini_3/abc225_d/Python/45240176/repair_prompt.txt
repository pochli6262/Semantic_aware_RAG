You are a Python repair assistant.

A user gives you the following buggy program.

## Buggy Program
N,Q=map(int,input().split())
connects=[[-1,-1] for _ in range(N)]

for _ in range(Q):
    query=list(map(int,input().split()))
    t=query[0]
    x=query[1]-1
    if t==1:
        y=query[2]-1
        connects[x][1]=y
        connects[y][0]=x
    elif t==2:
        y=query[2]-1
        connects[x][1]=-1
        connects[y][0]=-1
    else:
        front=[]
        back=[]
        now=x
        while connects[now][0]!=-1:
            now=connects[now][0]
            front.append(now)
        now=x
        while connects[now][1]!=-1:
            now=connects[now][1]
            back.append(now+1)
        answer=front[::-1]+[x+1]+back
        print(len(answer),*answer)

## Related Example Fixes (retrieved from similar problems)
These examples are only references. 
They must NOT be copied directly, but can inspire how similar bugs were fixed.

### Example 1
--- Buggy Code ---
N, M = map(int, input().split())
graph = [[] for _ in range(N+M+1)]

for i in range(N):
    A = int(input())
    S = set(map(int, input().split()))
    for j in S:
        graph[j].append(i+M+1)
        graph[i+M+1].append(j)

from collections import deque
q = deque([])
q.append(1)
D = [1<<61] * (N+M+1)
D[1] = 0
while q:
    u = q.popleft()
    d = D[u]
    for v in graph[u]:
        if D[v] <= d + 1:
            continue
        if v == N + M:
            print(d//2)
            exit()
        D[v] = d + 1
        q.append(v)
print(-1)

--- Correct Code ---
N, M = map(int, input().split())
graph = [[] for _ in range(N+M+1)]

for i in range(N):
    A = int(input())
    S = set(map(int, input().split()))
    for j in S:
        graph[j].append(i+M+1)
        graph[i+M+1].append(j)

from collections import deque
q = deque([])
q.append(1)
D = [1<<61] * (N+M+1)
D[1] = 0

while q:
    u = q.popleft()
    d = D[u]
    for v in graph[u]:
        if D[v] <= d + 1:
            continue
        if v == M:
            print(d//2)
            exit()
        D[v] = d + 1
        q.append(v)
        
print(-1)


### Example 2
--- Buggy Code ---
import heapq
N,M=map(int,input().split())
graph=[[] for _ in range(N)]
reversed_graph=[set() for _ in range(N)]
pairs=set()

que=set(range(N))
for _ in range(M):
    u,v=map(int,input().split())
    pair=(u-1,v-1)
    if pair in pairs:
        continue
    graph[u-1].append(v-1)
    reversed_graph[v-1].add(u-1)
    if v-1 in que:
        que.remove(v-1)

que=list(que)
heapq.heapify(que)

answers=[]
used=[0 for _ in range(N)]
while que:
    now=heapq.heappop(que)
    answers.append(now+1)
    for to in graph[now]:
        if len(reversed_graph[to])==0:
            heapq.heappush(que,to)
    
if len(answers)==N:
    print(*answers)
else:
    print(-1)

--- Correct Code ---
import heapq
N,M=map(int,input().split())
graph=[[] for _ in range(N)]
reversed_graph=[set() for _ in range(N)]
pairs=set()

que=set(range(N))
for _ in range(M):
    u,v=map(int,input().split())
    pair=(u-1,v-1)
    if pair in pairs:
        continue
    pairs.add(pair)
    graph[u-1].append(v-1)
    reversed_graph[v-1].add(u-1)
    if v-1 in que:
        que.remove(v-1)

que=list(que)
heapq.heapify(que)

answers=[]
used=[0 for _ in range(N)]
while que:
    now=heapq.heappop(que)
    answers.append(now+1)
    for to in graph[now]:
        reversed_graph[to].remove(now)
        if len(reversed_graph[to])==0:
            heapq.heappush(que,to)
    
if len(answers)==N:
    print(*answers)
else:
    print(-1)


### Example 3
--- Buggy Code ---
N,Q = map(int,input().split())
li = [i for i in range(N+1)]
ind = [i for i in range(N+1)]
for i in range(Q):
    A = int(input())
    B = ind[A]
    
    if B != N:
        temp = li[B]
        li[B] = li[B+1]
        li[B+1] = temp
        ind[A] = B+1
        ind[li[B]] = B
    else:
        temp = li[B]
        li[B] = li[B-1]
        li[B-1] = temp
        ind[A] = B-1
        ind[li[B]] = B

print(*li)



--- Correct Code ---
N,Q = map(int,input().split())
li = [i for i in range(N+1)]
ind = [i for i in range(N+1)]
for i in range(Q):
    A = int(input())
    B = ind[A]
    
    if B != N:
        temp = li[B]
        li[B] = li[B+1]
        li[B+1] = temp
        ind[A] = B+1
        ind[li[B]] = B
    else:
        temp = li[B]
        li[B] = li[B-1]
        li[B-1] = temp
        ind[A] = B-1
        ind[li[B]] = B

print(*li[1:])


Your task:
1) Identify the single incorrect line in the buggy program.
2) Assume EXACTLY ONE line is wrong.
3) Provide the corrected version of the ENTIRE program, changing only that single line.
4) Do not restructure or rewrite unrelated code.
5) Respond ONLY in JSON format:

{
  "explanation": "Explain the bug and how you fixed it.",
  "fixed_code": "The FULL program with only that ONE line corrected."
}