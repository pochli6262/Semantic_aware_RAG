You are a Python repair assistant.

A user gives you the following buggy program.

## Buggy Program
import sys
import math
from collections import defaultdict
from collections import Counter
from functools import lru_cache


sys.setrecursionlimit(10 ** 8)
MOD1 = 10**9 + 7


def main():
    n, x = map(int, sys.stdin.readline().split())
    a, b = [], []
    for _ in range(n):
        ai, bi = map(int, sys.stdin.readline().split())
        a.append(ai)
        b.append(bi)

    # @lru_cache(maxsize=None)
    # def rec(index, s):
    #     if s == x:
    #         return True
    #
    #     if index == n:
    #         return False
    #
    #     for i in range(b[index] + 1):
    #         if rec(index + 1, s + i * a[index]):
    #             return True
    #     return False
    #
    # if rec(0, 0):
    #     print("Yes")
    # else:
    #     print("No")
    dp = [[False for _ in range(x + 1)] for _ in range(n + 1)]
    dp[0][0] = True
    for i in range(n):
        for j in range(x + 1):
            for k in range(b[i] + 1):
                if j >= k * a[i]:
                    dp[i + 1][j] = dp[i][j] or dp[i][j - k * a[i]]
    if dp[n][x]:
        print("Yes")
    else:
        print("No")


if __name__ == '__main__':
    main()


## Related Example Fixes (retrieved from similar problems)
These examples are only references. 
They must NOT be copied directly, but can inspire how similar bugs were fixed.

### Example 1
--- Buggy Code ---
import sys
import copy
from collections import deque,defaultdict
import math
import heapq
from itertools import accumulate
import itertools 
from functools import reduce
#import pypyjit
#pypyjit.set_param('max_unroll_recursion=-1')
sys.setrecursionlimit(10**8)
mod = 10**9 + 7
INF = math.inf
input = lambda: sys.stdin.readline().rstrip()
ii = lambda: int(input())
mi = lambda: map(int, input().split())
li = lambda: list(mi())
from functools import lru_cache #@lru_cache(maxsize=None)

def main():
    N,K = mi()
    A = [(j,i) for i,j in enumerate(li())]
    B = set(li())
    A.sort(reverse=True)
    M = A[0][0]
    for i in range(N):
        if A[i][0] == M:
            if A[i][1] in B:
                print("Yes")
                return
    print("No")


if __name__=="__main__":
    main()

--- Correct Code ---
import sys
import copy
from collections import deque,defaultdict
import math
import heapq
from itertools import accumulate
import itertools 
from functools import reduce
#import pypyjit
#pypyjit.set_param('max_unroll_recursion=-1')
sys.setrecursionlimit(10**8)
mod = 10**9 + 7
INF = math.inf
input = lambda: sys.stdin.readline().rstrip()
ii = lambda: int(input())
mi = lambda: map(int, input().split())
li = lambda: list(mi())
from functools import lru_cache #@lru_cache(maxsize=None)

def main():
    N,K = mi()
    A = [(j,i) for i,j in enumerate(li())]
    B = set(li())
    A.sort(reverse=True)
    M = A[0][0]
    for i in range(N):
        if A[i][0] == M:
            if A[i][1]+1 in B:
                print("Yes")
                return
    print("No")


if __name__=="__main__":
    main()


### Example 2
--- Buggy Code ---
import sys, time, random
from collections import deque, Counter, defaultdict
input = lambda: sys.stdin.readline().rstrip()
ii = lambda: int(input())
mi = lambda: map(int, input().split())
li = lambda: list(mi())
inf = 2 ** 61 - 1
mod = 998244353

def solve():
    s = input()
    n = len(s)
    dp = [inf] * (n + 1)
    bdic = defaultdict(lambda: inf)
    dic = defaultdict(lambda: inf)
    dp[0] = 0
    dic[0] = 0
    cnt = 0
    if s[0] == 'B':
        bdic[0] = 0
    for i in range(n):
        dp[i + 1] = min(dp[i + 1], dp[i] + 1)
        if s[i] == 'A':
            cnt += 1
        else:
            cnt -= 2
        if s[i] == 'B':
            dp[i + 1] = min(dp[i + 1], dic[cnt])
        dp[i + 1] = min(dp[i + 1], bdic[cnt])
        dic[cnt] = min(dic[cnt], dp[i + 1])
        if s[i] == 'B':
            bdic[cnt] = min(bdic[cnt], dp[i + 1])
    print((n - dp[n]) // 3)
            
            
        
    
for _ in range(ii()):
    solve()

--- Correct Code ---
import sys, time, random
from collections import deque, Counter, defaultdict
input = lambda: sys.stdin.readline().rstrip()
ii = lambda: int(input())
mi = lambda: map(int, input().split())
li = lambda: list(mi())
inf = 2 ** 61 - 1
mod = 998244353

def solve():
    s = input()
    n = len(s)
    dp = [inf] * (n + 1)
    bdic = defaultdict(lambda: inf)
    dic = defaultdict(lambda: inf)
    dp[0] = 0
    dic[0] = 0
    cnt = 0
    if s[0] == 'B':
        bdic[0] = 0
    for i in range(n):
        dp[i + 1] = min(dp[i + 1], dp[i] + 1)
        if s[i] == 'A':
            cnt += 1
        else:
            cnt -= 2
        if s[i] == 'B':
            dp[i + 1] = min(dp[i + 1], dic[cnt])
        dp[i + 1] = min(dp[i + 1], bdic[cnt])
        dic[cnt] = min(dic[cnt], dp[i + 1])
        if i + 1 < n and s[i + 1] == 'B':
            bdic[cnt] = min(bdic[cnt], dp[i + 1])
    print((n - dp[n]) // 3)
            
            
        
    
for _ in range(ii()):
    solve()


### Example 3
--- Buggy Code ---
import sys
from collections import Counter, defaultdict, deque
from itertools import accumulate, combinations, permutations
from heapq import heappop, heappush
from math import inf
sys.setrecursionlimit(10**6)
MOD = 998244353

stdin = sys.stdin

ni = lambda: int(ns())
na = lambda: list(map(int, stdin.readline().split()))
ns = lambda: stdin.readline().rstrip()  # ignore trailing spaces

q,k = na()
dp = [0]*(k+1)
dp[0] = 1
for _ in range(q):
    query = ns().split()
    t = query[0]
    x = int(query[1])
    if t == '+':
        for i in range(k,-1,-1):
            if i-x < 0: break
            dp[i] += dp[i-x]
    else:
        assert t == '-'
        for i in range(k+1):
            if i-x < 0: continue
            dp[i] -= dp[i-x]
    # print(t,x,dp)
    print(dp[k])


--- Correct Code ---
import sys
from collections import Counter, defaultdict, deque
from itertools import accumulate, combinations, permutations
from heapq import heappop, heappush
from math import inf
sys.setrecursionlimit(10**6)
MOD = 998244353

stdin = sys.stdin

ni = lambda: int(ns())
na = lambda: list(map(int, stdin.readline().split()))
ns = lambda: stdin.readline().rstrip()  # ignore trailing spaces

q,k = na()
dp = [0]*(k+1)
dp[0] = 1
for _ in range(q):
    query = ns().split()
    t = query[0]
    x = int(query[1])
    if t == '+':
        for i in range(k,-1,-1):
            if i-x < 0: break
            dp[i] += dp[i-x]
    else:
        assert t == '-'
        for i in range(k+1):
            if i-x < 0: continue
            dp[i] -= dp[i-x]
    # print(t,x,dp)
    print(dp[k]%MOD)


Your task:
1) Identify the single incorrect line in the buggy program.
2) Assume EXACTLY ONE line is wrong.
3) Provide the corrected version of the ENTIRE program, changing only that single line.
4) Do not restructure or rewrite unrelated code.
5) Respond ONLY in JSON format:

{
  "explanation": "Explain the bug and how you fixed it.",
  "fixed_code": "The FULL program with only that ONE line corrected."
}