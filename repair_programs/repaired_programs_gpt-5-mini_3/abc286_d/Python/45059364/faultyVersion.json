{
  "explanation": "The bug was that the DP loop over amounts n iterated upward (from 0 to X). That allowed using the same coin multiple times within the same coin-processing step (chaining newly set DP values), effectively ignoring the per-coin limit b. To prevent reusing a coin more than b times, we must iterate n downward (from X to 0) so transitions use only DP values from before considering the current coin. I fixed the single line to loop n in descending order.",
  "fixed_code": "N,X=map(int,input().split())\n  \nDP=[0]*(X+1) #DP[n]=現在n円払えるか\nDP[0]=1\nfor i in range(N):\n  a,b=map(int,input().split())\n  for n in range(X, -1, -1):\n    for c in range(1,b+1):\n      if 0<=n-c*a and DP[n-c*a]:\n        DP[n]=1\nprint(\"Yes\" if DP[X] else \"No\")"
}