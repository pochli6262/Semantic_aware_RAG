You are a Python repair assistant.

A user gives you the following buggy program.

## Buggy Program
MOD = 998244353

class ml(list):
    def __setitem__(self, key, value):
        super().__setitem__(key, value%MOD)

n = int(input())
a = list(map(int, input().split()))
dp = [ml([0] * (1<<10)) for _ in range(n+1)]
dp[0][0] = 1

for i in range(n):
    inv = pow(a[i], -1, MOD)
    for bit in range(1<<10):
        if dp[i][bit] == 0: continue
        for plus in range(1, min(11, a[i]+1)):
            nex = ((bit * (2 ** plus) + 2 ** (plus - 1)) % (1 << 10))
            dp[i+1][bit|nex] += dp[i][bit] * inv

ans = 0
for bit in range(1<<10):
    if bit & (1<<9): ans = (ans + dp[n][bit]) % MOD
print(ans)


## Related Example Fixes (retrieved from similar problems)
These examples are only references. 
They must NOT be copied directly, but can inspire how similar bugs were fixed.

### Example 1
--- Buggy Code ---
MOD = 998244353

n,m = map(int, input().split())
s = list(map(int, input().split()))

if m == 0:
    ok = True
    for i in range(n):
        if i == 0:
            if s[i] == 0:
                ok = False
                break
        else:
            if s[i] == 1:
                ok = False
                break
    
    if ok:
        print(1)
    else:
        print(0)
    exit()

dp = [[0 for i in range(n+1)] for i in range(n+1)]
dp[0][0] = 1

for i in range(n):
    if s[i] == 0:
        for j in range(n):
            dp[i+1][j] += dp[i][j] * j
            dp[i+1][j] %= MOD

            dp[i+1][j+1] += dp[i][j] * max(m-j, 0)
            dp[i+1][j+1] %= MOD
        
        dp[i+1][n] += dp[i][n] * n
        dp[i+1][n] %= MOD
    else:
        for j in range(n):
            dp[i+1][j+1] += dp[i][j]
    
    # print(dp)

ans = 0
for j in range(1,n+1):
    ans += dp[n][j]
    ans %= MOD

print(ans)

--- Correct Code ---
MOD = 998244353

n,m = map(int, input().split())
s = list(map(int, input().split()))

if m == 0:
    ok = True
    for i in range(n):
        if i == 0:
            if s[i] == 0:
                ok = False
                break
        else:
            if s[i] == 1:
                ok = False
                break
    
    if ok:
        print(1)
    else:
        print(0)
    exit()

dp = [[0 for i in range(n+1)] for i in range(n+1)]
dp[0][0] = 1

for i in range(n):
    if s[i] == 0:
        for j in range(n):
            dp[i+1][j] += dp[i][j] * j
            dp[i+1][j] %= MOD

            dp[i+1][j+1] += dp[i][j] * max(m-j, 0)
            dp[i+1][j+1] %= MOD
        
        dp[i+1][n] += dp[i][n] * n
        dp[i+1][n] %= MOD
    else:
        for j in range(n):
            if j == (m+1):
                break
            dp[i+1][j+1] += dp[i][j]
    
    # print(dp)

ans = 0
for j in range(1,n+1):
    ans += dp[n][j]
    ans %= MOD

print(ans)


### Example 2
--- Buggy Code ---
MOD = 10**9 + 7

N = int(input())
A = list(map(int, input().split()))

dp = [1] + [0]*2000
res = [0]*21
for a in A:
  ndp = dp.copy()
  for s in range(-1000, 1001):
    if s == 0: continue
    ns = s + a
    if -1000 <= ns <= 1000:
      ndp[ns] += dp[s]
      ndp[ns] %= MOD
  for s in range(-10, 10):
    if s == 0: continue
    ns = s + a
    if -1000 <= ns <= 1000:
      ndp[ns] += res[s]
      ndp[ns] %= MOD
  if a != 0:
    res[a] = dp[0]
  dp = ndp.copy()

print(sum(dp) % MOD)

--- Correct Code ---
MOD = 10**9 + 7

N = int(input())
A = list(map(int, input().split()))

dp = [1] + [0]*2000
res = [0]*21
for a in A:
  ndp = dp.copy()
  for s in range(-1000, 1001):
    if s == 0: continue
    ns = s + a
    if -1000 <= ns <= 1000:
      ndp[ns] += dp[s]
      ndp[ns] %= MOD
  for s in range(-10, 11):
    if s == 0: continue
    ns = s + a
    if -1000 <= ns <= 1000:
      ndp[ns] += res[s]
      ndp[ns] %= MOD
  if a != 0:
    res[a] = dp[0]
  dp = ndp.copy()

print(sum(dp) % MOD)


### Example 3
--- Buggy Code ---
MOD = 998244353 
M = 2*10**5+2
N = int(input())
A = list(map(int,input().split()))
B = [0]*M

for a in A:
    B[a] += 1

dp = [1]
for i in range(1,M):
    b = B[i]
    S = [0]*((len(dp)-1+b)//2+2)
    for i in range(len(dp)):
        S[0] += dp[i]
        S[(b+i)//2+1] += -dp[i]
    
    #print(S)
    
    S[0] %= MOD
    for i in range(len(S)-1):
        S[i+1] += S[i]
        S[i+1] %= MOD

    dp = S[:-1]
    #print(b,dp)

print(sum(dp)%MOD)

--- Correct Code ---
MOD = 998244353 
M = 2*10**5+30
N = int(input())
A = list(map(int,input().split()))
B = [0]*M

for a in A:
    B[a] += 1

dp = [1]
for i in range(1,M):
    b = B[i]
    S = [0]*((len(dp)-1+b)//2+2)
    for i in range(len(dp)):
        S[0] += dp[i]
        S[(b+i)//2+1] += -dp[i]
    
    #print(S)
    
    S[0] %= MOD
    for i in range(len(S)-1):
        S[i+1] += S[i]
        S[i+1] %= MOD

    dp = S[:-1]
    #print(b,dp)

print(sum(dp)%MOD)


Your task:
1) Identify the single incorrect line in the buggy program.
2) Assume EXACTLY ONE line is wrong.
3) Provide the corrected version of the ENTIRE program, changing only that single line.
4) Do not restructure or rewrite unrelated code.
5) Respond ONLY in JSON format:

{
  "explanation": "Explain the bug and how you fixed it.",
  "fixed_code": "The FULL program with only that ONE line corrected."
}