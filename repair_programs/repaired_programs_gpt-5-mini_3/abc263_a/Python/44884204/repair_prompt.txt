You are a Python repair assistant.

A user gives you the following buggy program.

## Buggy Program
def main():
    cards = list(map(int, input().split()))
    assert len(cards) == 5

    cards.sort()
    if cards[0] == cards[1] and cards[0] == cards[2] and cards[0] != cards[3] and cards[3] == cards[4]:
        print("Yes")
    else:
        print("No")


if __name__ == "__main__":
    main()


## Related Example Fixes (retrieved from similar problems)
These examples are only references. 
They must NOT be copied directly, but can inspire how similar bugs were fixed.

### Example 1
--- Buggy Code ---
# B - Yellow and Red Card
def main():
  N, Q = map(int, input().split())
  cards = [0] * (N+1)

  for _ in range(Q):
    c, x = map(int, input().split())

    if c == 1:
      cards[x] += 1
    elif c == 2:
      cards[x] += 2
    else:
      if cards[x] == 2:
        print('Yes')
      else:
        print('No')
      

if __name__ == '__main__':
  main()

--- Correct Code ---
# B - Yellow and Red Card
def main():
  N, Q = map(int, input().split())
  cards = [0] * (N+1)

  for _ in range(Q):
    c, x = map(int, input().split())

    if c == 1:
      cards[x] += 1
    elif c == 2:
      cards[x] += 2
    else:
      if cards[x] >= 2:
        print('Yes')
      else:
        print('No')
      

if __name__ == '__main__':
  main()


### Example 2
--- Buggy Code ---
def main():
    n = int(input())
    s = list(input())

    ok = False

    for i in range(n):
        if s[i] == "o":
            ok = True
        elif s[i] == "x":
            print("No")
            break

    if ok == True:
        print("Yes")
    else:
        print("No")
    
if __name__ == "__main__":
    main()

--- Correct Code ---
def main():
    n = int(input())
    s = list(input())

    ok = False

    for i in range(n):
        if s[i] == "o":
            ok = True
        elif s[i] == "x":
            print("No")
            return

    if ok == True:
        print("Yes")
    else:
        print("No")
    
if __name__ == "__main__":
    main()


### Example 3
--- Buggy Code ---
def main():
    N,K=map(int,input().split())
    A=list(map(int,input().split()))
    if K>=1:
        print("Yes")
        A.sort()
        print(*A)
    elif sum(A)>=0:
        print("Yes")
        A.sort(reverse=True)
        print(*A)
    else:
        print("No")



if __name__=="__main__":
    main()

--- Correct Code ---
def main():
    N,K=map(int,input().split())
    A=list(map(int,input().split()))
    if K>=1:
        print("Yes")
        A.sort()
        print(*A)
    elif sum(A)>=K:
        print("Yes")
        A.sort(reverse=True)
        print(*A)
    else:
        print("No")



if __name__=="__main__":
    main()


Your task:
1) Identify the single incorrect line in the buggy program.
2) Assume EXACTLY ONE line is wrong.
3) Provide the corrected version of the ENTIRE program, changing only that single line.
4) Do not restructure or rewrite unrelated code.
5) Respond ONLY in JSON format:

{
  "explanation": "Explain the bug and how you fixed it.",
  "fixed_code": "The FULL program with only that ONE line corrected."
}