You are a Python expert.

A user gives you the following Python program which is buggy.

## Problem Description (from dataset)
Score : 400 points

### Problem Statement

There is a sequence A=(A\_0,\ldots,A\_{N-1}) of length N.  
Determine if there exists a tuple of integers (x,y,z,w) that satisfies all of the following conditions:

* 0 \leq x < y < z < w \leq N
* A\_x + A\_{x+1} + \ldots + A\_{y-1} = P
* A\_y + A\_{y+1} + \ldots + A\_{z-1} = Q
* A\_z + A\_{z+1} + \ldots + A\_{w-1} = R

### Constraints

* 3 \leq N \leq 2\times 10^5
* 1 \leq A\_i \leq 10^9
* 1 \leq P,Q,R \leq 10^{15}
* All values in input are integers.

---

### Input

Input is given from Standard Input in the following format:

```
N P Q R
A_0 A_1 \ldots A_{N-1}
```

### Output

If there exists a tuple that satisfies the conditions, print `Yes`; otherwise, print `No`.

---

### Sample Input 1

```
10 5 7 5
1 3 2 2 2 3 1 4 3 2
```

### Sample Output 1

```
Yes
```

(x,y,z,w)=(1,3,6,8) satisfies the conditions.

---

### Sample Input 2

```
9 100 101 100
31 41 59 26 53 58 97 93 23
```

### Sample Output 2

```
No
```

---

### Sample Input 3

```
7 1 1 1
1 1 1 1 1 1 1
```

### Sample Output 3

```
Yes
```

## Your Analysis (1-sentence bug summary)
The code wrongly treats w==N as invalid (using a >=N check), so it rejects valid solutions where the third segment ends at the array end.

## Buggy Program
from bisect import bisect_left as bl
N,P,Q,R = list(map(int,input().split()))
A = list(map(int,input().split()))
asum = [0]
for n in range(N):
    asum.append(asum[-1]+A[n])
for x in range(N):
    a = asum[x]
    y = bl(asum,P+a)
    if y>=N or asum[y]-a!=P : continue
    a = asum[y]
    z = bl(asum,Q+a)
    if z>=N or asum[z]-a!=Q : continue
    a = asum[z]
    w = bl(asum,R+a)
    if w>=N or asum[w]-a!=R : continue
    print("Yes")
    break
else:
    print("No")

## Related Known Fixes (retrieved diffs)
### Diff 1
--- 
+++ 
@@ -30,7 +30,7 @@
 x10=[1]*(10**6+1)
 y59=[1]*(10**6+1)
 mody=978902437
-for i in range(1,N+1):
+for i in range(1,10**6+1):
   x10[i]=x10[i-1]*10
   x10[i]%=mod
   y59[i]=y59[i-1]*59

### Diff 2
--- 
+++ 
@@ -6,6 +6,8 @@
 #s = input()
 x,y,a,b,c = map(int,input().split())
 def judge(x,y,a,b,c):
+    if (a // x) + (1 if a % x != 0 else 0) + (b // x) + (1 if b % x != 0 else 0) + (c // x) + (1 if c % x != 0 else 0) <= y:
+        return True
     y -= (a // x) + (1 if a % x != 0 else 0)
     if y <= 0:
         return False

### Diff 3
--- 
+++ 
@@ -24,7 +24,7 @@
   if len(A_[i])!=len(B_[i]):
     print('No')
     exit()
-  max_ = max(0, len(A_[i]))
+  max_ = max(max_, len(A_[i]))
 
 if max_>=2: 
   print('Yes')

### Diff 4
--- 
+++ 
@@ -15,7 +15,7 @@
 #[0,L),[L,R),[R,N)
 for L in range(N+1):
     for R in range(L, N+1):
-        if S-(N-R)*M<=0 or (S-(N-R)*M) >= M*(R-L):
+        if S-(N-R)*M<0 or (S-(N-R)*M) > M*(R-L):
             continue
         if R==L:
             z = (B[N]-B[R])*M

### Diff 5
--- 
+++ 
@@ -51,7 +51,7 @@
             if count_y_cum[i][w - 1] == target:
                 free += 1
             elif count_y_cum[i][w - 1] == target + 2 * q:
-                if 0 < target < 2 * count_y - 2 * q:
+                if 0 < target <= 2 * count_y - 2 * q:
                     r *= free
                     r %= MOD
                 target += 2 * q

Your task:
1) Identify the single incorrect line according to the problem summary and the retrieved diffs.
2) Assume EXACTLY ONE line is wrong.
3) Provide the corrected version of the ENTIRE program, changing only that single line â€” all other lines must remain identical.
4) Do not restructure or rewrite unrelated code.
5) Respond ONLY in JSON format:

{
  "explanation": "Explain what was wrong in that single line and how you fixed it (mention which diff patterns inspired the fix if applicable).",
  "fixed_code": "The FULL program with only that ONE line corrected."
}