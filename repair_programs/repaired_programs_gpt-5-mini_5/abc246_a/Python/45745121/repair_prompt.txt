You are a Python expert.

A user gives you the following Python program which is buggy.

## Problem Description (from dataset)
Score : 100 points

### Problem Statement

There is a rectangle in the xy-plane. Each edge of this rectangle is parallel to the x- or y-axis, and its area is not zero.

Given the coordinates of three of the four vertices of this rectangle, (x\_1, y\_1), (x\_2, y\_2), and (x\_3, y\_3), find the coordinates of the other vertex.

### Constraints

* -100 \leq x\_i, y\_i \leq 100
* There uniquely exists a rectangle with all of (x\_1, y\_1), (x\_2, y\_2), (x\_3, y\_3) as vertices, edges parallel to the x- or y-axis, and a non-zero area.
* All values in input are integers.

---

### Input

Input is given from Standard Input in the following format:

```
x_1 y_1
x_2 y_2
x_3 y_3
```

### Output

Print the sought coordinates (x, y) separated by a space in the following format:

```
x y
```

---

### Sample Input 1

```
-1 -1
-1 2
3 2
```

### Sample Output 1

```
3 -1
```

The other vertex of the rectangle with vertices (-1, -1), (-1, 2), (3, 2) is (3, -1).

---

### Sample Input 2

```
-60 -40
-60 -80
-20 -80
```

### Sample Output 2

```
-20 -40
```

## Your Analysis (1-sentence bug summary)
The program prints the coordinates as a Python list (e.g., "[3, -1]") instead of printing the two numbers separated by a space ("3 -1").

## Buggy Program
array = list(map(int,input().split()))
xy1 = array
array = list(map(int,input().split()))
xy2 = array
array = list(map(int,input().split()))
xy3 = array
x = []
for i in range(2):
  if xy1[i] == xy2[i]:
    x.append(xy3[i])
  elif xy1[i] == xy3[i]:
    x.append(xy2[i])
  else:
    x.append(xy1[i])
print(x)

## Related Known Fixes (retrieved diffs)
### Diff 1
--- 
+++ 
@@ -10,7 +10,7 @@
 
 ans = 'No'
 for i in y:
-    yi = y[i]
+    yi = sorted(y[i])
     for j in range(len(yi)-1):
         if yi[j][1] == 'R' and yi[j+1][1] == 'L':
             ans = 'Yes'

### Diff 2
--- 
+++ 
@@ -1,6 +1,6 @@
 x, y, a, b, c = map(int, input().split())
 def solve_two(x, y, a, b):
-    if x==0 or y==0:
+    if x<=0 or y<=0:
         return False
     res = ((a+x-1)//x+(b+x-1)//x <= y) or ((a+y-1)//y+(b+y-1)//y <= x)
     return res
@@ -16,4 +16,3 @@
 
 ans = solve_three(x, y, a, b, c)
 print('Yes' if ans else 'No')
-

### Diff 3
--- 
+++ 
@@ -15,7 +15,7 @@
             print("Yes")
         elif abs(x1 - x2) == 3 and abs(y1 - y2) in [1, 3]:
             print("Yes")
-        elif abs(x1 - x2) == 4 and abs(y1 - y2) == 0:
+        elif abs(x1 - x2) == 4 and abs(y1 - y2) in [0, 2]:
             print("Yes")
         else:
             print("No")

### Diff 4
--- 
+++ 
@@ -22,7 +22,7 @@
     gi = h - 1 - gi
     S = T
 
-if sj > gj:
+if (sj > gj) or (sj == gj == 1):
     T = [[""] * w for _ in range(h)]
     for i in range(h):
         for j in range(w):
@@ -30,6 +30,8 @@
     sj = w - 1 - sj
     gj = w - 1 - gj
     S = T
+
+
 
 rb = [[0] * w for _ in range(h)]
 

### Diff 5
--- 
+++ 
@@ -90,7 +90,7 @@
             mx = mxColumns[y3-M]
             if mx > a2:
                 a2 = mx
-            a3 = mxULss[N][y3]
+            a3 = mxURss[N][y3]
             area = a1+a2+a3
     #        print('# (x1, x3):', (x1, x3), '/ (a1, a2, a3):', (a1, a2, a3), '/ area:', area)
             if area > ans:

Your task:
1) Identify the single incorrect line according to the problem summary and the retrieved diffs.
2) Assume EXACTLY ONE line is wrong.
3) Provide the corrected version of the ENTIRE program, changing only that single line â€” all other lines must remain identical.
4) Do not restructure or rewrite unrelated code.
5) Respond ONLY in JSON format:

{
  "explanation": "Explain what was wrong in that single line and how you fixed it (mention which diff patterns inspired the fix if applicable).",
  "fixed_code": "The FULL program with only that ONE line corrected."
}