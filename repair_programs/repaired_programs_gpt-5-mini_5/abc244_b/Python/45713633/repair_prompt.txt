You are a Python expert.

A user gives you the following Python program which is buggy.

## Problem Description (from dataset)
Score : 200 points

### Problem Statement

Consider an xy-plane. The positive direction of the x-axis is in the direction of east, and the positive direction of the y-axis is in the direction of north.  
Takahashi is initially at point (x, y) = (0, 0) and facing east (in the positive direction of the x-axis).

You are given a string T = t\_1t\_2\ldots t\_N of length N consisting of `S` and `R`.
Takahashi will do the following move for each i = 1, 2, \ldots, N in this order.

* If t\_i = `S`, Takahashi advances in the current direction by distance 1.
* If t\_i = `R`, Takahashi turns 90 degrees clockwise without changing his position. As a result, Takahashi's direction changes as follows.
  + If he is facing east (in the positive direction of the x-axis) before he turns, he will face south (in the negative direction of the y-axis) after he turns.
  + If he is facing south (in the negative direction of the y-axis) before he turns, he will face west (in the negative direction of the x-axis) after he turns.
  + If he is facing west (in the negative direction of the x-axis) before he turns, he will face north (in the positive direction of the y-axis) after he turns.
  + If he is facing north (in the positive direction of the y-axis) before he turns, he will face east (in the positive direction of the x-axis) after he turns.

Print the coordinates Takahashi is at after all the steps above have been done.

### Constraints

* 1 \leq N \leq 10^5
* N is an integer.
* T is a string of length N consisting of `S` and `R`.

---

### Input

Input is given from Standard Input in the following format:

```
N
T
```

### Output

Print the coordinates (x, y) Takahashi is at after all the steps described in the Problem Statement have been completed, in the following format, with a space in between:

```
x y
```

---

### Sample Input 1

```
4
SSRS
```

### Sample Output 1

```
2 -1
```

Takahashi is initially at (0, 0) facing east. Then, he moves as follows.

1. t\_1 = `S`, so he advances in the direction of east by distance 1, arriving at (1, 0).
2. t\_2 = `S`, so he advances in the direction of east by distance 1, arriving at (2, 0).
3. t\_3 = `R`, so he turns 90 degrees clockwise, resulting in facing south.
4. t\_4 = `S`, so he advances in the direction of south by distance 1, arriving at (2, -1).

Thus, Takahashi's final position, (x, y) = (2, -1), should be printed.

---

### Sample Input 2

```
20
SRSRSSRSSSRSRRRRRSRR
```

### Sample Output 2

```
0 1
```

## Your Analysis (1-sentence bug summary)
The rotate method mistakenly uses self.y (the position) when updating direction—self.dx is set to self.y instead of using self.dy—so the direction rotation is incorrect.

## Buggy Program
class Motion:
    def __init__(self) -> None:
        self.dx = 1
        self.dy = 0
        self.x = 0
        self.y = 0

    def rotate(self) -> None:
        self.dx, self.dy = self.y, -self.dx

    def move(self) -> None:
        self.x += self.dx
        self.y += self.dy

    @property
    def get_x(self) -> int:
        return self.x

    @property
    def get_y(self) -> int:
        return self.y


n = int(input())
t = input()

motion = Motion()
for c in t:
    if c == "S":
        motion.move()
    else:
        motion.rotate()

print(f"{motion.get_x} {motion.get_y}")


## Related Known Fixes (retrieved diffs)
### Diff 1
--- 
+++ 
@@ -9,7 +9,7 @@
     elif s=="U":
         y += 1
     elif s=="D":
-        y += 1
+        y -= 1
     
     return x, y
 

### Diff 2
--- 
+++ 
@@ -8,7 +8,7 @@
     Y += y
 
 if X > Y:
-    print("Takahasi")
+    print("Takahashi")
 elif X == Y:
     print("Draw")
 else:

### Diff 3
--- 
+++ 
@@ -82,7 +82,7 @@
     for i in range(1, N+1):
         for a in A:
             if i - a >= 0:
-                dp[i] = a + (i - a) - dp[i-a]
+                dp[i] = max(dp[i], a + (i - a) - dp[i-a])
 
     # print(dp)
     print(dp[-1])

### Diff 4
--- 
+++ 
@@ -22,7 +22,7 @@
 for i in range(H):
     for j in range(W):
         if a[i][j]=='S':
-            s=[i,j]
+            start=[i,j]
         if a[i][j]=='G':
             g=[i,j]
         if a[i][j]=='o':

### Diff 5
--- 
+++ 
@@ -52,5 +52,5 @@
 for x in range(i+N,2*N):
   ans.append(T[x])
 S = ''.join(ans)
+print(S)
 print(i)
-print(S)

Your task:
1) Identify the single incorrect line according to the problem summary and the retrieved diffs.
2) Assume EXACTLY ONE line is wrong.
3) Provide the corrected version of the ENTIRE program, changing only that single line — all other lines must remain identical.
4) Do not restructure or rewrite unrelated code.
5) Respond ONLY in JSON format:

{
  "explanation": "Explain what was wrong in that single line and how you fixed it (mention which diff patterns inspired the fix if applicable).",
  "fixed_code": "The FULL program with only that ONE line corrected."
}