You are a Python expert.

A user gives you the following Python program which is buggy.

## Problem Description (from dataset)
Score : 400 points

### Problem Statement

Takahashi has N kinds of coins;
specifically, for 1\leq i\leq N, he has B\_i coins worth A\_i yen (the currency in Japan) each.

Determine if Takahashi can pay exactly X yen (without change) with the coins he currently has.

### Constraints

* 1\leq N\leq 50
* 1\leq X\leq 10^4
* 1\leq A\_i\leq 100
* 1\leq B\_i\leq 50
* A\_i are pairwise distinct.
* All values in the input are integers.

---

### Input

The input is given from Standard Input in the following format:

```
N X
A_1 B_1
A_2 B_2
\vdots
A_N B_N
```

### Output

Print `Yes` if Takahashi can pay exactly X yen with the coins he currently has;
print `No` otherwise.

---

### Sample Input 1

```
2 19
2 3
5 6
```

### Sample Output 1

```
Yes
```

Takahashi has three 2-yen coins and six 5-yen coins.
He can use two 2-yen coins and three 5-yen coins to pay exactly 2\times 2+5\times 3=19 yen.
Thus, `Yes` should be printed.

---

### Sample Input 2

```
2 18
2 3
5 6
```

### Sample Output 2

```
No
```

There is no combination of the coins that he can use to pay exactly 18 yen.
Thus, `No` should be printed.

---

### Sample Input 3

```
3 1001
1 1
2 1
100 10
```

### Sample Output 3

```
Yes
```

He need not use all kinds of coins.

## Your Analysis (1-sentence bug summary)
The inner loop iterates j only up to x-1 (range(x)) instead of including x, so reachable states with sum exactly x aren't propagated to the next item.

## Buggy Program
n, x = map(int, input().split())
a = [0 for _ in range(n)]
b = [0 for _ in range(n)]
for i in range(n):
  a[i], b[i] = map(int, input().split())

dp = [[False for _ in range(x + 1)] for _ in range(n + 1)]
for i in range(n + 1):
  dp[i][0] = True

for i in range(n):
  for j in range(x):
    for k in range(b[i] + 1):
      if dp[i][j]:
        if j + (k * a[i]) <= x:
            dp[i + 1][j + (k * a[i])] = True

if dp[-1][-1]:
  print("Yes")
else:
  print("No")  








## Related Known Fixes (retrieved diffs)
### Diff 1
--- 
+++ 
@@ -19,7 +19,7 @@
     C = C - 1
   while(X[i] >= 5 and B > 0):
     X[i] = X[i] - 5
-    B =  - 1
+    B = B - 1
   while(X[i] >= 1 and A > 0):
     X[i] = X[i] - 1
     A = A - 1

### Diff 2
--- 
+++ 
@@ -18,7 +18,7 @@
     X = [x // prices[i] for x in X]
     prices = [p // prices[i] for p in prices]
 
-if valid and sum(prices) <= A[-1]:
+if valid and sum(X) <= A[-1]:
     print("Yes")
 else:
     print("No")

### Diff 3
--- 
+++ 
@@ -89,7 +89,7 @@
         res.append((x,y))
         for i in range(N):
             tmp[i] = (tmp[i]+x) % y
-        print(tmp)
+        #print(tmp)
         
     """
     x = goal[idx[0]]

### Diff 4
--- 
+++ 
@@ -122,7 +122,7 @@
             curr += nums[i]
             if curr == 1:
                 for j in range(i, n):
-                    ans[j] += total
+                    ans[j] -= total
                 print('Yes')
                 print(*ans)
                 break

### Diff 5
--- 
+++ 
@@ -1,6 +1,6 @@
 def d(a, b, c, x):
     t = x // (a + c)
-    return t * (a * b) + (x - ((a + c) * t)) * b
+    return t * (a * b) + min(a, (x - ((a + c) * t))) * b
 
 
 A, B, C, D, E, F, X = map(int, input().split())

Your task:
1) Identify the single incorrect line according to the problem summary and the retrieved diffs.
2) Assume EXACTLY ONE line is wrong.
3) Provide the corrected version of the ENTIRE program, changing only that single line â€” all other lines must remain identical.
4) Do not restructure or rewrite unrelated code.
5) Respond ONLY in JSON format:

{
  "explanation": "Explain what was wrong in that single line and how you fixed it (mention which diff patterns inspired the fix if applicable).",
  "fixed_code": "The FULL program with only that ONE line corrected."
}