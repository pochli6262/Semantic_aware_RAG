{
  "explanation": "The code used `if nowT >= p:` which allows a move that leaves the time limit exactly 0; the problem states Takahashi cannot make a move that makes the time limit 0 or less, so the correct check is `nowT > p`. I fixed that single comparison to require strictly greater remaining time before moving.",
  "fixed_code": "N, M, T = map(int, input().split())\nA = list(map(int, input().split()))\nB = []\nfor i in range(M):\n    B.append(tuple(map(int, input().split())))\n\nfrom collections import deque\nqueA = deque(A)\nB.sort(key=lambda x: x[0])\nqueB = deque(B)\n\nans = \"Yes\"\nnowT = T\nnowP = 1\nS = set([row[0] for row in B])\n# print(S)\nfor i in range(N-1):\n    # print(nowT)\n    p = queA.popleft()\n    if nowP in S:\n        # print(\"inS\")\n        pt = queB.popleft()\n        nowT += pt[1]\n\n    if nowT > p:\n        nowT -= p\n        nowP += 1\n    else:\n        ans = \"No\"\n        break\n\nprint(ans)\n"
}