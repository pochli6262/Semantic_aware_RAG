You are a Python expert.

A user gives you the following Python program which is buggy.

## Problem Description (from dataset)
Score : 100 points

### Problem Statement

Takahashi has recorded the number of steps he walked for N weeks. He walked A\_i steps on the i-th day.

Find the total number of steps Takahashi walked each week.  
More precisely, find the sum of the steps for the first week (the 1-st through 7-th day), the sum of the steps for the second week (the 8-th through 14-th day), and so on.

### Constraints

* 1 \leq N \leq 10
* 0 \leq A\_i \leq 10^5
* All input values are integers.

---

### Input

The input is given from Standard Input in the following format:

```
N
A_1 A_2 \ldots A_{7N}
```

### Output

Let B\_i be the number of steps walked for the i-th week. Print B\_1,B\_2,\ldots,B\_N in this order, separated by spaces.

---

### Sample Input 1

```
2
1000 2000 3000 4000 5000 6000 7000 2000 3000 4000 5000 6000 7000 8000
```

### Sample Output 1

```
28000 35000
```

For the first week, he walked 1000+2000+3000+4000+5000+6000+7000=28000 steps, and for the second week, he walked 2000+3000+4000+5000+6000+7000+8000=35000 steps.

---

### Sample Input 2

```
3
14159 26535 89793 23846 26433 83279 50288 41971 69399 37510 58209 74944 59230 78164 6286 20899 86280 34825 34211 70679 82148
```

### Sample Output 2

```
314333 419427 335328
```

## Your Analysis (1-sentence bug summary)
The program prints the Python list representation (with brackets and commas) instead of the required space-separated weekly sums.

## Buggy Program
N = int(input())
A = list(map(int,input().split()))

res = [0]*N
SUM = 0
for i in range(len(A)):
    SUM += A[i]
    if (i + 1)%7==0:
        res[i//7] = SUM
        SUM = 0

print(res)

## Related Known Fixes (retrieved diffs)
### Diff 1
--- 
+++ 
@@ -82,7 +82,7 @@
     for i in range(1, N+1):
         for a in A:
             if i - a >= 0:
-                dp[i] = a + (i - a) - dp[i-a]
+                dp[i] = max(dp[i], a + (i - a) - dp[i-a])
 
     # print(dp)
     print(dp[-1])

### Diff 2
--- 
+++ 
@@ -4,7 +4,7 @@
     for i in range(N):
         # 価値v, 重さw
         v = vs[i]; w = ws[i]
-        for j in range(W, w-1, -1):
+        for j in range(w, W+1):
             dp[j] = max(dp[j-w] + v, dp[j])
     return max(dp)
 

### Diff 3
--- 
+++ 
@@ -9,4 +9,4 @@
 for i in B:
   ans -= i*(i-1)/2*(N-i)
   ans -= i*(i-1)*(i-2)/6
-print(ans)
+print(int(ans))

### Diff 4
--- 
+++ 
@@ -18,7 +18,7 @@
         B.append(B[i-1] + C[i-1])
 
 ans = 10 ** 20
-for j in range(N):
+for j in range(1, N):
     ans = min(ans, A[j]-A[0] + B[N]-B[j], B[j]-B[0] + A[N]-A[j])
 
 print(ans)

### Diff 5
--- 
+++ 
@@ -8,7 +8,7 @@
     used = set([3, 6])
     for _ in range(N - 3):
         for v in list(used):
-            if v + 1 not in used and v * (v + 1) not in used:
+            if v + 1 not in used and v * (v + 1) not in used and v * (v + 1) <= 10**9:
                 used.discard(v)
                 used.add(v + 1)
                 used.add(v * v + v)

Your task:
1) Identify the single incorrect line according to the problem summary and the retrieved diffs.
2) Assume EXACTLY ONE line is wrong.
3) Provide the corrected version of the ENTIRE program, changing only that single line — all other lines must remain identical.
4) Do not restructure or rewrite unrelated code.
5) Respond ONLY in JSON format:

{
  "explanation": "Explain what was wrong in that single line and how you fixed it (mention which diff patterns inspired the fix if applicable).",
  "fixed_code": "The FULL program with only that ONE line corrected."
}