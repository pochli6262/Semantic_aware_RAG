You are a Python repair assistant.

A user gives you the following buggy program.

## Buggy Program
n,m,t=map(int,input().split())
s=list(map(int,input().split()))
dic=dict()
for i in range(m):
    a,b=map(int,input().split())
    dic[a]=b

for now in range(1,n):
    
    if t-s[now-1]<0:
        print("No")
        exit()
    else:
        t-=s[now-1]
    if now+1 in dic:
        t+=dic[now+1]
    
print("Yes")

## Related Example Fixes (retrieved from similar problems)
These examples are only references. 
They must NOT be copied directly, but can inspire how similar bugs were fixed.

### Example 1
--- Buggy Code ---
n,m=map(int,input().split())
s=input()
t=input()

dp=[[False]*(m+1) for i in range(n+1)]
dp[0][0]=True

for i in range(n):
    if dp[i][0]:
        for k in range(m):
            tl=t[k:]
            if i-k<0 or i+(m-k)>n:
                continue
            for j in range(1,len(tl)+1):
                if s[i:i+j]==tl[:j]:
                    dp[i+j][len(tl)-j]=True
    if i+m>n:
        break
    for j in range(1,m+1):
        if dp[i][j]:
            for k in range(1,m+1):
                if s[i:i+k]==t[:k]:
                    dp[i+k][m-k]=True

print('Yes' if dp[-1][0] else 'No')

--- Correct Code ---
n,m=map(int,input().split())
s=input()
t=input()

dp=[[False]*(m+1) for i in range(n+1)]
dp[0][0]=True

for i in range(n):
    if dp[i][0]:
        for k in range(m):
            tl=t[k:]

            if i-k<0 or i+(m-k)>n:
                continue
            for j in range(1,len(tl)+1):
                if s[i:i+j]==tl[:j]:
                    dp[i+j][len(tl)-j]=True
    if i+m>n:
        continue
    for j in range(1,m+1):
        if dp[i][j]:
            for k in range(1,m+1):
                if s[i:i+k]==t[:k]:
                    dp[i+k][m-k]=True

print('Yes' if dp[-1][0] else 'No')


### Example 2
--- Buggy Code ---
# coding: utf-8
# Your code here!
n,m=map(int,input().split())
s=input()
t=input()
dp=[[[False]for _ in range(m+1)]for _ in range(n+1)]
dp[0][0]=True
for i in range(n):
    if i+m<=n:
        for j in range(m+1):
            if dp[i][j]:
                dp[i][0]=True
    if dp[i][m]:
        for j in range(m+1):
            dp[i][j]=True
    for j in range(m):
        if dp[i][j] and s[i]==t[j]:
            dp[i+1][j+1]=True
print("Yes" if dp[n][m] else "No")

--- Correct Code ---
# coding: utf-8
# Your code here!
n,m=map(int,input().split())
s=input()
t=input()
dp=[[False for i in range(m+1)] for j in range(n+1)]
dp[0][0]=True
for i in range(n):
    if i+m<=n:
        for j in range(m+1):
            if dp[i][j]:
                dp[i][0]=True
    if dp[i][m]:
        for j in range(m+1):
            dp[i][j]=True
    for j in range(m):
        if dp[i][j] and s[i]==t[j]:
            dp[i+1][j+1]=True
print("Yes" if dp[n][m] else "No")


### Example 3
--- Buggy Code ---
n,s=map(int, input().split())
c=[0]*n
d=[]
for i in range(n):
  a,b=map(int, input().split())
  if a<=b:
    d.append(b-a)
    s-=a
  else:
    c[i]=1
    d.append(a-b)
    s-=b

if s<=0:
  print("No")
  exit()

dp=[[0]*(s+1) for _ in range(n+1)]
dp[0][0]=1
for i in range(n):
  D=d[i]
  for j in range(s+1):
    if dp[i][j]==1:
      dp[i+1][j]=1
      if j+D<=s:
        dp[i+1][j+D]=1

if dp[-1][-1]==0:
  print("No")
  exit()

ans=""
e=["H","T"]
now=s
for i in reversed(range(n)):
  if dp[i][now]==1:
    ans+=e[c[i]]
  else:
    ans+=e[(c[i]+1)%2]
    now-=d[i]



ans=ans[::-1]
print("Yes")
print(ans)

--- Correct Code ---
n,s=map(int, input().split())
c=[0]*n
d=[]
for i in range(n):
  a,b=map(int, input().split())
  if a<=b:
    d.append(b-a)
    s-=a
  else:
    c[i]=1
    d.append(a-b)
    s-=b

if s<0:
  print("No")
  exit()

dp=[[0]*(s+1) for _ in range(n+1)]
dp[0][0]=1
for i in range(n):
  D=d[i]
  for j in range(s+1):
    if dp[i][j]==1:
      dp[i+1][j]=1
      if j+D<=s:
        dp[i+1][j+D]=1

if dp[-1][-1]==0:
  print("No")
  exit()

ans=""
e=["H","T"]
now=s
for i in reversed(range(n)):
  if dp[i][now]==1:
    ans+=e[c[i]]
  else:
    ans+=e[(c[i]+1)%2]
    now-=d[i]



ans=ans[::-1]
print("Yes")
print(ans)


Your task:
1) Identify the single incorrect line in the buggy program.
2) Assume EXACTLY ONE line is wrong.
3) Provide the corrected version of the ENTIRE program, changing only that single line.
4) Do not restructure or rewrite unrelated code.
5) Respond ONLY in JSON format:

{
  "explanation": "Explain the bug and how you fixed it.",
  "fixed_code": "The FULL program with only that ONE line corrected."
}