You are a Python repair assistant.

A user gives you the following buggy program.

## Buggy Program
import sys

input = sys.stdin.readline
# sys.setrecursionlimit(10**6)

def main():
    N = int(input())
    l = []
    for i in range(N):
        a, b = map(int, input().split())
        l.append((-a * 10 ** 100 / (a + b), i + 1))
    l.sort()
    for i in range(N):
        print(l[i][1], end=' ')
    print()

if __name__ == '__main__':
    main()


## Related Example Fixes (retrieved from similar problems)
These examples are only references. 
They must NOT be copied directly, but can inspire how similar bugs were fixed.

### Example 1
--- Buggy Code ---
import sys

def main():
    input = sys.stdin.readline
    T = input().rstrip()
    N = int(input())
    l = len(T)
    dp = [[10**9] * (l + 1) for _ in [0] * (N + 1)]
    dp[0][0] = 0
    for i in range(N):
        a,*si = input().rstrip().split()
        for j in range(l):
            if dp[i][j] + 1:
                dp[i+1][j] = min(dp[i+1][j],dp[i][j])
                for s in si:
                    if T[j:j+len(s)] == s:
                        dp[i+1][j+len(s)] = min(dp[i+1][j+len(s)],dp[i][j] + 1)
    print(dp[N][l] if dp[N][l] < 10**9 else -1)

if __name__ == '__main__':
    main()

--- Correct Code ---
import sys

def main():
    input = sys.stdin.readline
    T = input().rstrip()
    N = int(input())
    l = len(T)
    dp = [[10**9] * (l + 1) for _ in [0] * (N + 1)]
    dp[0][0] = 0
    for i in range(N):
        a,*si = input().rstrip().split()
        for j in range(l + 1):
            if dp[i][j] + 1:
                dp[i+1][j] = min(dp[i+1][j],dp[i][j])
                for s in si:
                    if T[j:j+len(s)] == s:
                        dp[i+1][j+len(s)] = min(dp[i+1][j+len(s)],dp[i][j] + 1)
    print(dp[N][l] if dp[N][l] < 10**9 else -1)

if __name__ == '__main__':
    main()


### Example 2
--- Buggy Code ---
import sys

sys.setrecursionlimit(10**9)


def main():
    N, K = map(int, input().split())
    S = input()

    for i in range(1, N + 1):
        D = [[0 for _ in range(26)] for _ in range(i)]
        T = [0 for _ in range(i)]

        for j, s in enumerate(S):
            D[j % i][ord(s) - ord("a")] += 1
            T[j % i] += 1

        k = 0
        for l, d in enumerate(D):
            d.sort(reverse=True)
            k += T[l] - d[0]

        if k <= K:
            print(i)
            return


if __name__ == "__main__":
    main()


--- Correct Code ---
import sys

sys.setrecursionlimit(10**9)


def main():
    N, K = map(int, input().split())
    S = input()

    for i in range(1, N + 1):
        if N % i:
            continue

        D = [[0 for _ in range(26)] for _ in range(i)]
        T = [0 for _ in range(i)]

        for j, s in enumerate(S):
            D[j % i][ord(s) - ord("a")] += 1
            T[j % i] += 1

        k = 0
        for l, d in enumerate(D):
            d.sort(reverse=True)
            k += T[l] - d[0]

        if k <= K:
            print(i)
            return


if __name__ == "__main__":
    main()


### Example 3
--- Buggy Code ---
import sys
input = sys.stdin.buffer.readline
# def input(): return sys.stdin.readline().rstrip()
# sys.setrecursionlimit(10 ** 7)

N = int(input())
A = list(map(int, (input().split())))

def f(x):
    a = []
    for i in range(N):
        if A[i]!=x:
            a.append(A[i])
    return a

x = A[-1]
for i in range(N-1):
    if A[i]>A[i+1]:
        x = i
        break

a = f(x)
print(*a)


--- Correct Code ---
import sys
input = sys.stdin.buffer.readline
# def input(): return sys.stdin.readline().rstrip()
# sys.setrecursionlimit(10 ** 7)

N = int(input())
A = list(map(int, (input().split())))

def f(x):
    a = []
    for i in range(N):
        if A[i]!=x:
            a.append(A[i])
    return a

x = A[-1]
for i in range(N-1):
    if A[i]>A[i+1]:
        x = A[i]
        break

a = f(x)
print(*a)


Your task:
1) Identify the single incorrect line in the buggy program.
2) Assume EXACTLY ONE line is wrong.
3) Provide the corrected version of the ENTIRE program, changing only that single line.
4) Do not restructure or rewrite unrelated code.
5) Respond ONLY in JSON format:

{
  "explanation": "Explain the bug and how you fixed it.",
  "fixed_code": "The FULL program with only that ONE line corrected."
}