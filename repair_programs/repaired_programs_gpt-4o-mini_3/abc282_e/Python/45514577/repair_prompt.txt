You are a Python repair assistant.

A user gives you the following buggy program.

## Buggy Program
from atcoder.dsu import DSU
from heapq import heappop, heappush
from collections import deque
N, M = map(int, input().split())
A = list(map(int, input().split()))

G = [[0] * N for _ in range(N)]
for i in range(N):
    for j in range(i+1, N):
        G[i][j] = (pow(A[i], A[j], M) + pow(A[j], A[i], M)) % M
        G[j][i] = G[i][j]

edges = []
for i in range(N):
    for j in range(i+1, N):
        edges.append(((pow(A[i], A[j], M) + pow(A[j], A[i], M)) % M, i, j))
edges.sort()

ans = 0
uf = DSU(N)
for p, i, j in edges:
    if uf.same(i, j): continue
    ans += p
    uf.merge(i, j)
print(ans)

## Related Example Fixes (retrieved from similar problems)
These examples are only references. 
They must NOT be copied directly, but can inspire how similar bugs were fixed.

### Example 1
--- Buggy Code ---
from collections import defaultdict
import heapq
N,M = map(int, input().split())

in_edges = [0]*(N+1)
G = defaultdict(list)
for _ in range(M):
    A,B = map(int, input().split())
    G[A].append(B)
    in_edges[B] += 1

H = []
for i in range(1,N+1):
    if in_edges[i] == 0:
        heapq.heappush(H, i)

heapq.heapify(H)
ans = []
while H:
    v = heapq.heappop(H)
    ans.append(v)
    for u in G[v]:
        in_edges[u] -= 1
        if in_edges[u] == 0:
            heapq.heappush(H, u)

if ans:
    print(*ans)
else:
    print(-1)

--- Correct Code ---
from collections import defaultdict
import heapq
N,M = map(int, input().split())

in_edges = [0]*(N+1)
G = defaultdict(list)
for _ in range(M):
    A,B = map(int, input().split())
    G[A].append(B)
    in_edges[B] += 1

H = []
for i in range(1,N+1):
    if in_edges[i] == 0:
        heapq.heappush(H, i)

heapq.heapify(H)
ans = []
while H:
    v = heapq.heappop(H)
    ans.append(v)
    for u in G[v]:
        in_edges[u] -= 1
        if in_edges[u] == 0:
            heapq.heappush(H, u)

if ans and len(ans) == N:
    print(*ans)
else:
    print(-1)


### Example 2
--- Buggy Code ---
from heapq import heappop,heappush
INF=1<<60
N,M=map(int,input().split())
A=list(map(int,input().split()))
B=list(map(int,input().split()))
dp=[0]
for i in range(N):
    ndp=[INF]*((i+1)*(i+2)//2+1)
    for j in range(len(dp)):
        ndp[j]=min(ndp[j],dp[j])
        ndp[j+i+1]=min(ndp[j+i+1],dp[j]+A[i])
    dp=ndp
box=[(INF,-1)]
bsum=0
jsum=0
for i in range(M):
    heappush(box,((B[i]+i)//(i+1),i))
    jsum+=i+1
ans=INF
for i in range(len(dp)):
    if box[0][0]<=i:
        _,j=heappop(box)
        bsum+=B[j]
        jsum-=j+1
    ans=min(ans,dp[-i-1]+bsum+jsum*i)
print(ans)

--- Correct Code ---
from heapq import heappop,heappush
INF=1<<60
N,M=map(int,input().split())
A=list(map(int,input().split()))
B=list(map(int,input().split()))
dp=[0]
for i in range(N):
    ndp=[INF]*((i+1)*(i+2)//2+1)
    for j in range(len(dp)):
        ndp[j]=min(ndp[j],dp[j])
        ndp[j+i+1]=min(ndp[j+i+1],dp[j]+A[i])
    dp=ndp
box=[(INF,-1)]
bsum=0
jsum=0
for i in range(M):
    heappush(box,((B[i]+i)//(i+1),i))
    jsum+=i+1
ans=INF
for i in range(len(dp)):
    while box[0][0]<=i:
        _,j=heappop(box)
        bsum+=B[j]
        jsum-=j+1
    ans=min(ans,dp[-i-1]+bsum+jsum*i)
print(ans)


### Example 3
--- Buggy Code ---
from heapq import *

n, m = map(int, input().split())
A = [*map(int, input().split())]
G = [set() for _ in range(n)]
score = [0] * n
for _ in range(m):
    u, v = map(int, input().split())
    G[u - 1].add(v - 1)
    G[v - 1].add(u - 1)
    score[u - 1] += A[v - 1]
    score[v - 1] += A[u - 1]
Q = [(c, i) for i, c in enumerate(score)]
heapify(Q)
used = [0] * n
ans = 0
while Q:
    _, u = heappop(Q)
    if used[u]:
        continue
    used[u] = 1
    cnt = 0
    for v in G[u]:
        cnt += A[v]
        G[v].remove(u)
        score[v] -= u
        heappush(Q, (score[v], v))
    ans = max(ans, cnt)
print(ans)


--- Correct Code ---
from heapq import *

n, m = map(int, input().split())
A = [*map(int, input().split())]
G = [set() for _ in range(n)]
score = [0] * n
for _ in range(m):
    u, v = map(int, input().split())
    G[u - 1].add(v - 1)
    G[v - 1].add(u - 1)
    score[u - 1] += A[v - 1]
    score[v - 1] += A[u - 1]
Q = [(c, i) for i, c in enumerate(score)]
heapify(Q)
used = [0] * n
ans = 0
while Q:
    _, u = heappop(Q)
    if used[u]:
        continue
    used[u] = 1
    cnt = 0
    for v in G[u]:
        cnt += A[v]
        G[v].remove(u)
        score[v] -= A[u]
        heappush(Q, (score[v], v))
    ans = max(ans, cnt)
print(ans)


Your task:
1) Identify the single incorrect line in the buggy program.
2) Assume EXACTLY ONE line is wrong.
3) Provide the corrected version of the ENTIRE program, changing only that single line.
4) Do not restructure or rewrite unrelated code.
5) Respond ONLY in JSON format:

{
  "explanation": "Explain the bug and how you fixed it.",
  "fixed_code": "The FULL program with only that ONE line corrected."
}