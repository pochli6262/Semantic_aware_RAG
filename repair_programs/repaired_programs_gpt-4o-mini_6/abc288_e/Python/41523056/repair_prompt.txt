You are a Python expert.

A user gives you the following Python program which is buggy.

## Problem Description (from dataset)
Score : 500 points

### Problem Statement

There are N items in a shop, numbered as Item 1, Item 2, \ldots, Item N.  
For each i = 1, 2, \ldots, N, the **regular price** of Item i is A\_i yen. For each item, there is only one in stock.

Takahashi wants M items: Item X\_1, Item X\_2, \ldots, Item X\_M.

He repeats the following until he gets all items he wants.

> Let r be the number of unsold items now.
> Choose an integer j such that 1 \leq j \leq r, and buy the item with the j-th smallest item number among the unsold items, for its **regular price** plus C\_j yen.

Print the smallest total amount of money needed to get all items Takahashi wants.

Takahashi may also buy items other than the ones he wants.

### Constraints

* 1 \leq M \leq N \leq 5000
* 1 \leq A\_i \leq 10^9
* 1 \leq C\_i \leq 10^9
* 1 \leq X\_1 \lt X\_2 \lt \cdots \lt X\_M \leq N
* All values in the input are integers.

---

### Input

The input is given from Standard Input in the following format:

```
N M
A_1 A_2 \ldots A_N
C_1 C_2 \ldots C_N
X_1 X_2 \ldots X_M
```

### Output

Print the answer.

---

### Sample Input 1

```
5 2
3 1 4 1 5
9 2 6 5 3
3 5
```

### Sample Output 1

```
17
```

Here is a way for Takahashi to get all items he wants with the smallest total amount of money.

* Initially, five items, Items 1, 2, 3, 4, 5, are remaining.
  Choose j = 5 to buy the item with the fifth smallest item number among the remaining, Item 5, for A\_5 + C\_5 = 5 + 3 = 8 yen.
* Then, four items, Items 1, 2, 3, 4, are remaining.
  Choose j = 2 to buy the item with the second smallest item number among the remaining, Item 2, for A\_2 + C\_2 = 1 + 2 = 3 yen.
* Then, three items, Items 1, 3, 4, are remaining.
  Choose j = 2 to buy the item with the second smallest item number among the remaining, Item 3, for A\_3 + C\_2 = 4 + 2 = 6 yen.

Now, Takahashi has all items he wants, Items 3 and 5, (along with Item 2, which is not wanted) for a total cost of 8 + 3 + 6 = 17 yen, the minimum possible.

---

### Sample Input 2

```
20 8
29 27 79 27 30 4 93 89 44 88 70 75 96 3 78 39 97 12 53 62
32 38 84 49 93 53 26 13 25 2 76 32 42 34 18 77 14 67 88 12
1 3 4 5 8 14 16 20
```

### Sample Output 2

```
533
```

## Your Analysis (1-sentence bug summary)
The likely bug is that the program incorrectly calculates the costs associated with the items being purchased, particularly in how it manages the cumulative costs while accounting for unsold items.

## Buggy Program
"""
cf. https://atcoder.jp/contests/abc288/editorial/5659
"""
INF = 10**12
def solve(n, m, a, c, x):
    x = [_-1 for _ in x]
    # i番目の商品までで、j個の商品を買ったときに、必要なコスト
    cost = [[INF] * n for i in range(n)]
    for i in range(n):
        cost[i][0] = c[i]
        for j in range(1, i+1):
            cost[i][j] = min(cost[i][j-1], c[i-j])

    # 購入が必須かどうか
    required = [False] * n
    for i in x:
        required[i] = True

    dp = [[INF] * (n+1) for i in range(n+1)] # (現在の商品, 購入した数) => 最小金額
    dp[0][0] = 0
    for i in range(n):
        for j in range(i+1):
            dp[i+1][j+1] = min(dp[i+1][j+1], dp[i][j] + a[i] + cost[i][j])
            if not required[i]: # 商品iを買わない
                dp[i+1][j] = min(dp[i+1][j], dp[i][j])

    return min(dp[n][m:])

n, m = map(int, input().split())
a = [*map(int, input().split())]
c = [*map(int, input().split())]
x = [*map(int, input().split())]
print(solve(n, m, a, c, x))

## Related Known Fixes (retrieved diffs)
### Diff 1
--- 
+++ 
@@ -24,7 +24,7 @@
             # F
             F_j = PCF[j][2:PCF[j][1]+2]
             # すべて満たす条件
-            if (P_i > P_j) and (set(F_j) >= set(F_i)) and ((P_i > P_j) or (set(F_j) > set(F_i))):
+            if (P_i >= P_j) and (set(F_j) >= set(F_i)) and ((P_i > P_j) or (set(F_j) > set(F_i))):
                 ans = True # True == 1
                 # print(i,j,F_i,F_j)
 

### Diff 2
--- 
+++ 
@@ -54,7 +54,7 @@
                         new_mins[m + 1] = A[i + 1] - b
             mins = new_mins
 
-        answer = dp[N - 1][mod]
+        answer = min(dp[N - 1][mod], dp[N - 1][mod - 1])
         print(answer)
 
 

### Diff 3
--- 
+++ 
@@ -33,7 +33,7 @@
         dp[i][min(x,j)][m] %= mod
 
 ans = 0
-for j in range(n+1):
+for j in range(n+2):
   ans += dp[-1][j][k]
   ans %= mod
 

### Diff 4
--- 
+++ 
@@ -71,7 +71,7 @@
     # g1 = pow(g, MOD - 2, MOD)
     lcm = ((A1 * A2) // g) % MOD
     # lcm1 = pow(lcm, MOD - 2, MOD)
-    print(A1, A2, lcm, N // lcm)
+    # print(A1, A2, lcm, N // lcm)
     return N // lcm
 
 

### Diff 5
--- 
+++ 
@@ -33,4 +33,4 @@
             NDP[j+1]=min(NDP[j+1],DP[j]+abs(now-(x+1)))
     DP=NDP
 
-print(DP[r])
+print(min(DP[r-1],DP[r]))

Your task:
1) Identify the single incorrect line according to the problem summary and the retrieved diffs.
2) Assume EXACTLY ONE line is wrong.
3) Provide the corrected version of the ENTIRE program, changing only that single line — all other lines must remain identical.
4) Do not restructure or rewrite unrelated code.
5) Respond ONLY in JSON format:

{
  "explanation": "Explain what was wrong in that single line and how you fixed it (mention which diff patterns inspired the fix if applicable).",
  "fixed_code": "The FULL program with only that ONE line corrected."
}