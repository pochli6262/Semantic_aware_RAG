{
  "explanation": "The DFS was treating 8-directional neighbors (including diagonals) as connected because the nested loops iterate i,j in {-1,0,1}. Components should be 4-connected (up, down, left, right). I fixed the single line that checks neighbors by requiring abs(i) + abs(j) == 1, so only orthogonal neighbors are considered. This prevents diagonal connections and yields correct component sizes.",
  "fixed_code": "# Copyright (c) 2023, Le Duc Phuc Long\n\n# If you don't think twice, you have to code twice.\n\n# Import session\nimport sys\n#input = sys.stdin.readline\nfrom collections import defaultdict\n\n############ ---- Input Functions ---- ############\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef instr():\n    return list(input().strip())\n\ndef invr():\n    return map(int, input().split())\n\n############ ---- Other Functions ---- ############\n# Precompute\n\n# IO\n#input = sys.stdin.readline\n# sys.stdin = open('in.txt', 'r')\n# sys.stdout = open('out.txt', 'w')\n# Main function\nn, m = invr()\nmtx = [list(input()) for _ in range(n)]\n\ndef dfs(x, y):\n    mtx[x][y] = '.'\n    cnt = 1\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            u, v = x+i, y+j\n            if 0 <= u < n and 0 <= v < m and mtx[u][v] == '#' and abs(i) + abs(j) == 1:\n                cnt += dfs(u, v)\n    return cnt\n                \n\nans = [0]*(n+1)\nfor i in range(n):\n    for j in range(m):\n        if (mtx[i][j] == '#'):\n            ans[dfs(i, j)//4] += 1\n\nans.pop(0)\n\nprint(' '.join(map(str, ans)))"
}