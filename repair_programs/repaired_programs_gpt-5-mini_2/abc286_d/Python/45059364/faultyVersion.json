{
  "explanation": "The bug was that the loop over n iterated from small to large (for n in range(X+1)). That allowed DP values set earlier in the same item iteration to be reused when computing larger sums, effectively letting one coin be used multiple times and breaking the bounded count constraint. Changing the n-loop to iterate from X down to 0 (for n in range(X, -1, -1)) ensures DP[n-c*a] is read from the state before processing the current coin, preventing reuse of the same coin more than b times.",
  "fixed_code": "N,X=map(int,input().split())\n  \nDP=[0]*(X+1) #DP[n]=現在n円払えるか\nDP[0]=1\nfor i in range(N):\n  a,b=map(int,input().split())\n  for n in range(X, -1, -1):\n    for c in range(1,b+1):\n      if 0<=n-c*a and DP[n-c*a]:\n        DP[n]=1\nprint(\"Yes\" if DP[X] else \"No\")"
}