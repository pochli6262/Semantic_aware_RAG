You are a Python expert.

A user gives you the following Python program which is buggy.

## Problem Description (from dataset)
Score : 300 points

### Problem Statement

We have a grid with H horizontal rows and W vertical columns. (i, j) denotes the square at the i-th row from the top and j-th column from the left.  
(i,j) has a character G\_{i,j} written on it. G\_{i,j} is `U`, `D`, `L`, or `R`.

You are initially at (1,1). You repeat the following operation until you cannot make a move.

> Let (i,j) be the square you are currently at.  
> If G\_{i,j} is `U` and i \neq 1, move to (i-1,j).  
> If G\_{i,j} is `D` and i \neq H, move to (i+1,j).  
> If G\_{i,j} is `L` and j \neq 1, move to (i,j-1).  
> If G\_{i,j} is `R` and j \neq W, move to (i,j+1).  
> Otherwise, you cannot make a move.

Print the square you end up at when you cannot make a move.  
If you indefinitely repeat moving, print `-1` instead.

### Constraints

* 1 \leq H, W \leq 500
* G\_{i,j} is `U`, `D`, `L`, or `R`.
* H and W are integers.

---

### Input

Input is given from Standard Input in the following format:

```
H W
G_{1,1}G_{1,2}\dots G_{1,W}
G_{2,1}G_{2,2}\dots G_{2,W}
\vdots
G_{H,1}G_{H,2}\dots G_{H,W}
```

### Output

If you end up at (i, j), print it in the following format:

```
i j
```

If you indefinitely repeat moving, print `-1`.

---

### Sample Input 1

```
2 3
RDU
LRU
```

### Sample Output 1

```
1 3
```

You will move as (1, 1) \to (1, 2) \to (2, 2) \to (2, 3) \to (1, 3), ending up here, so the answer is (1, 3).

---

### Sample Input 2

```
2 3
RRD
ULL
```

### Sample Output 2

```
-1
```

You will indefinitely repeat moving as (1, 1) \to (1, 2) \to (1, 3) \to (2, 3) \to (2, 2) \to (2, 1) \to (1, 1) \to (1, 2) \to \dots, so `-1` should be printed in this case.

---

### Sample Input 3

```
9 44
RRDDDDRRRDDDRRRRRRDDDRDDDDRDDRDDDDDDRRDRRRRR
RRRDLRDRDLLLLRDRRLLLDDRDLLLRDDDLLLDRRLLLLLDD
DRDLRLDRDLRDRLDRLRDDLDDLRDRLDRLDDRLRRLRRRDRR
DDLRRDLDDLDDRLDDLDRDDRDDDDRLRRLRDDRRRLDRDRDD
RDLRRDLRDLLLLRRDLRDRRDRRRDLRDDLLLLDDDLLLLRDR
RDLLLLLRDLRDRLDDLDDRDRRDRLDRRRLDDDLDDDRDDLDR
RDLRRDLDDLRDRLRDLDDDLDDRLDRDRDLDRDLDDLRRDLRR
RDLDRRLDRLLLLDRDRLLLRDDLLLLLRDRLLLRRRRLLLDDR
RRRRDRDDRRRDDRDDDRRRDRDRDRDRRRRRRDDDRDDDDRRR
```

### Sample Output 3

```
9 5
```

## Your Analysis (1-sentence bug summary)
The bug likely arises from the incorrect handling of the character 'W', which should be 'R', causing unexpected behavior when moving right in the grid.

## Buggy Program
h,w=map(int,input().split())
g=[]
for i in range(h):
    tmp=input()
    g.append(list(tmp))
visited=[[False]*w for _ in range(h)]
i,j=0,0
for k in range(10**6):
    if visited[i][j]==True:
        print(-1)
        exit()
    if g[i][j]=="U":
        if i==0:
            print(i+1,j+1)
            exit()
        else:
            visited[i][j]=True
            i-=1
    if g[i][j]=="D":
        if i==h-1:
            print(i+1,j+1)
            exit()
        else:
            visited[i][j]=True
            i+=1
    if g[i][j]=="L":
        if j==0:
            print(i+1,j+1)
            exit()
        else:
            visited[i][j]=True
            j-=1
    if g[i][j]=="W":
        if j==w-1:
            print(i+1,j+1)
            exit()
        else:
            visited[i][j]=True
            j+=1

## Related Known Fixes (retrieved diffs)
### Diff 1
--- 
+++ 
@@ -44,7 +44,7 @@
     elif flg:
       S[h][w] = "*"
     h += 1
-  h = 0
+  h = H-1
   flg = False
   while h >= 0:
     if S[h][w] not in ("*", "."):

### Diff 2
--- 
+++ 
@@ -22,7 +22,7 @@
     gi = h - 1 - gi
     S = T
 
-if sj > gj:
+if (sj > gj) or (sj == gj == 1):
     T = [[""] * w for _ in range(h)]
     for i in range(h):
         for j in range(w):
@@ -30,6 +30,8 @@
     sj = w - 1 - sj
     gj = w - 1 - gj
     S = T
+
+
 
 rb = [[0] * w for _ in range(h)]
 

### Diff 3
--- 
+++ 
@@ -9,7 +9,7 @@
 def op(A, x,y):
     for i in range(H-1):
         for j in range(W-1):
-            if i*W+j > (H-1)*(W-1)//2:
+            if i*(W-1)+j >= (H-1)*(W-1)//2:
                 return
             A[x+i][y+j], A[x+H-2-i][y+W-2-j] = A[x+H-2-i][y+W-2-j], A[x+i][y+j]
             

### Diff 4
--- 
+++ 
@@ -234,6 +234,6 @@
     print("No")
 else:
     print("Yes")
-    d=["R","G","B"]
+    d=["R","W","B"]
     for i in range(1,N)[::-1]:
         print(d[res[i]]*i)

### Diff 5
--- 
+++ 
@@ -10,7 +10,7 @@
       if i > 0: d.discard(C[i-1][j])
       if j > 0: d.discard(C[i][j-1])
       if i < H-1: d.discard(C[i+1][j])
-      if j > W-1: d.discard(C[i][j+1])
+      if j < W-1: d.discard(C[i][j+1])
       C[i][j] = d.pop()
   for i in range(H):
     print("".join(C[i]))

Your task:
1) Identify the single incorrect line according to the problem summary and the retrieved diffs.
2) Assume EXACTLY ONE line is wrong.
3) Provide the corrected version of the ENTIRE program, changing only that single line â€” all other lines must remain identical.
4) Do not restructure or rewrite unrelated code.
5) Respond ONLY in JSON format:

{
  "explanation": "Explain what was wrong in that single line and how you fixed it (mention which diff patterns inspired the fix if applicable).",
  "fixed_code": "The FULL program with only that ONE line corrected."
}