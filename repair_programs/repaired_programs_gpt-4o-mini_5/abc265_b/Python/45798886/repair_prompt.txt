You are a Python expert.

A user gives you the following Python program which is buggy.

## Problem Description (from dataset)
Score : 200 points

### Problem Statement

Takahashi is exploring a cave in a video game.

The cave consists of N rooms arranged in a row. The rooms are numbered Room 1,2,\ldots,N from the entrance.

Takahashi is initially in Room 1, and the **time limit** is T.  
For each 1 \leq i \leq N-1, he may consume a time of A\_i to move from Room i to Room (i+1). There is no other way to move between rooms.
He cannot make a move that makes the time limit 0 or less.

There are M bonus rooms in the cave. The i-th bonus room is Room X\_i; when he arrives at the room, the time limit increases by Y\_i.

Can Takahashi reach Room N?

### Constraints

* 2 \leq N \leq 10^5
* 0 \leq M \leq N-2
* 1 \leq T \leq 10^9
* 1 \leq A\_i \leq 10^9
* 1 < X\_1 < \ldots < X\_M < N
* 1 \leq Y\_i \leq 10^9
* All values in input are integers.

---

### Input

Input is given from Standard Input in the following format:

```
N M T
A_1 A_2 \ldots A_{N-1}
X_1 Y_1
X_2 Y_2
\vdots
X_M Y_M
```

### Output

If Takahashi can reach Room N, print `Yes`; otherwise, print `No`.

---

### Sample Input 1

```
4 1 10
5 7 5
2 10
```

### Sample Output 1

```
Yes
```

* Takahashi is initially in Room 1, and the time limit is 10.
* He consumes a time of 5 to move to Room 2. Now the time limit is 5. Then, the time limit increases by 10; it is now 15.
* He consumes a time of 7 to move to Room 3. Now the time limit is 8.
* He consumes a time of 5 to move to Room 4. Now the time limit is 3.

---

### Sample Input 2

```
4 1 10
10 7 5
2 10
```

### Sample Output 2

```
No
```

He cannot move from Room 1 to Room 2.

## Your Analysis (1-sentence bug summary)
The bug likely lies in the handling of the time limit increase from bonus rooms, as it does not correctly account for the possibility of moving to a room with a time increase before the time deduction for moving to the next room.

## Buggy Program
import sys
sys.setrecursionlimit(10 ** 5 + 10000)
# sys.setrecursionlimit(10**6)
input = sys.stdin.readline    ####
def int1(x): return int(x) - 1
def II(): return int(input())
def MI(): return map(int, input().split())
def MI1(): return map(int1, input().split())
def LI(): return list(map(int, input().split()))
def LI1(): return list(map(int1, input().split()))
def LIS(): return list(map(int, SI()))
def LA(f): return list(map(f, input().split()))
def LLI(H): return [LI() for _ in range(H)]     # H:列数
def SI(): return input().strip('\n')
### 数字文字交じりクエリを文字列のリストにする '1 19 G' -> ['1', '19', 'G']
# input()を含まず、受け取ったLLSのクエリの文字列に対し実行する
# l = ''.join(Strings).split(' ')
def MS(): return input().split()
def LS(): return list(input().strip('\n'))
def LLS(H): return [LS() for _ in range(H)]
# 迷路の前後左右
#for y, x in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
def gen_matrix(h, w, init): return [[init] * w for _ in range(h)]
INF = float('inf')
# from bisect import bisect_left, bisect_right
# from heapq import heapify, heappop, heappush
import decimal
from decimal import Decimal
import math
from math import ceil, floor, log2, log, sqrt, gcd
def lcm(x, y): return (x * y) // gcd(x, y)
# At = list(zip(*A)) 転置行列
from itertools import combinations as comb, combinations_with_replacement as comb_w, product, permutations, accumulate
from collections import deque, defaultdict
from pprint import pprint
# import numpy as np    # cumsum
from functools import reduce, lru_cache     # decorator: 関数をメモ化再起してくれる. max_size=128
import operator
from copy import deepcopy
MOD = 10**9+7
MOD2 = 998244353
def y(): print('Yes'); exit()
def n(): print('No'); exit()
from bisect import bisect_left, bisect_right, insort
from typing import Generic, Iterable, Iterator, TypeVar, Union, List
T = TypeVar('T')
 
# 累積和 ans=list(itertools.accumulate(L))
# 順列 ans=list(itertools.permutation(L))
# 直積 ans=list(itertools.product(L,M))
# 重複なし組み合わせ ans=list(itertools.combinations(L,2))
# 重複あり組み合わせ ans=list(itertools.combinations_with_replacement(L,2))
# nCr ans=math.comb(n,r)

def solve():
    ans = INF

    n,m,t = MI()
    A = LI()
    L = LLI(m)

    d = defaultdict(int)
    for x, y in L:
        d[x] = y

    for i, a in enumerate(A):
        room = i+1          # 1-index
        if d[room]:
            t += d[room]
        t -= a
        if t >= 0:
            continue
        else:
            print("No")
            exit()
    
    print("Yes")




if __name__ == '__main__':
    solve()



## Related Known Fixes (retrieved diffs)
### Diff 1
--- 
+++ 
@@ -707,7 +707,7 @@
 N,K = MI()
 S = input()
 ans = []
-for i in range(len(S)):
+for i in range(len(S)-1):
     if S[i] == "o" and ans.count("o") <= K-1:
         ans.append("o")
     else:

### Diff 2
--- 
+++ 
@@ -708,8 +708,7 @@
 
 m = a
 M = a+d*(n-1)
-if(d < 0):
-    a = a+d*(n-1)
+
 ans = min(abs(m-x),abs(M-x))
 if(d==0):
     print(ans)

### Diff 3
--- 
+++ 
@@ -714,7 +714,7 @@
 
 # print(CA)
 # print(CB)
-ans = 0
+ans = -INF
 for i in range(n-m+1):
     ans = max(ans,CB[i+m] - CB[i] - (CA[i+m] - CA[i]) * i)
 

### Diff 4
--- 
+++ 
@@ -125,7 +125,7 @@
 
 D=1<<(2*d+1)
 dp=[[0]*D for i in range(n+1)]
-dp[0][0]=1
+dp[0][D-(1<<-~d)]=1
 for i in range(n):
     c=a[i]
     for b in range(D):

### Diff 5
--- 
+++ 
@@ -77,7 +77,7 @@
     print("No")
     exit()
 
-if len(set(A))!=A:
+if len(set(A))!=len(A):
     print("Yes")
     exit()
 

Your task:
1) Identify the single incorrect line according to the problem summary and the retrieved diffs.
2) Assume EXACTLY ONE line is wrong.
3) Provide the corrected version of the ENTIRE program, changing only that single line — all other lines must remain identical.
4) Do not restructure or rewrite unrelated code.
5) Respond ONLY in JSON format:

{
  "explanation": "Explain what was wrong in that single line and how you fixed it (mention which diff patterns inspired the fix if applicable).",
  "fixed_code": "The FULL program with only that ONE line corrected."
}