{
  "task": "abc263_a/Python/45528012",
  "query_summary": "The buggy condition includes an extra OR clause that makes it print “Yes” for just a triple or just a pair, instead of only when the numbers form a full house (three of a kind plus a pair).",
  "oracle_summary": "The buggy condition includes an extra OR clause that makes it print “Yes” for just a triple or just a pair, instead of only when the numbers form a full house (three of a kind plus a pair).",
  "retrieved": [
    {
      "summary": "The buggy code incorrectly checks if the difference between `b` and `a` is non-zero rather than specifically checking if it equals 1 or 9.",
      "diff": "--- \n+++ \n@@ -1,6 +1,6 @@\n a, b = map(int, input().split())\n \n-if b - a or b - a == 9:\n+if b - a == 1 or b - a == 9:\n   print('Yes')\n else:\n   print('No')"
    },
    {
      "summary": "The buggy code incorrectly uses the condition `abs(a-b)== 1 or 9`, which always evaluates to true due to the truthiness of the number 9, instead of checking if the absolute difference between `a` and `b` is exactly 1 or 9.",
      "diff": "--- \n+++ \n@@ -1,5 +1,5 @@\n a,b=map(int,input().split())\n-if abs(a-b)== 1 or 9:\n+if b - a == 1 or b - a == 9:\n     print(\"Yes\")\n else:\n     print(\"No\")"
    },
    {
      "summary": "The buggy code incorrectly initializes the list `ok` with pairs starting from (0,1) instead of (1,2), which causes valid input pairs like (1,2) to be excluded.",
      "diff": "--- \n+++ \n@@ -1,5 +1,5 @@\n a,b = map(int,input().split())\n-ok = [(i,i+1) for i in range(9)]\n+ok = [(i,i+1) for i in range(1,10)]\n ok.append((1,10))\n if (a,b) in ok:\n     print(\"Yes\")"
    },
    {
      "summary": "The buggy code incorrectly checks for the same type of elements (1 or 2) by comparing the second element of tuples in the sorted list without specifying which type it should match, leading to potentially false positives.",
      "diff": "--- \n+++ \n@@ -9,7 +9,7 @@\n \n c.sort()\n for i in range(n + m - 1):\n-    if c[i][1] == c[i+1][1]:\n+    if c[i][1] == 1 and c[i+1][1] == 1:\n         print(\"Yes\")\n         exit()\n print(\"No\")"
    },
    {
      "summary": "The problem in the buggy code is that it prints \"no\" (with a lowercase 'n') instead of \"No\" (with an uppercase 'N') in the else statement.",
      "diff": "--- \n+++ \n@@ -4,4 +4,4 @@\n if b == l_2[1]:\n   print(\"Yes\")\n else:\n-  print(\"no\")\n+  print(\"No\")"
    }
  ],
  "useful_diffs_indices": [],
  "useful_diffs_count": 0
}