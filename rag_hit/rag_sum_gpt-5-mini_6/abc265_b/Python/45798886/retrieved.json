{
  "task": "abc265_b/Python/45798886",
  "query_summary": "The program incorrectly treats t == 0 as a valid state and allows moves that reduce time to zero because it checks t >= 0 for success instead of requiring t > 0 (i.e., failing when t <= 0).",
  "oracle_summary": "The bug is that after subtracting the cost, it treats t == 0 as still alive (t >= 0) instead of failing when time is non-positive, which should require t > 0.",
  "retrieved": [
    {
      "summary": "The problem in the buggy code is that it initializes the variable `ans` with 0 instead of a very small negative number (like `-INF`), which prevents the logic from correctly finding the maximum value when the computed results are negative.",
      "diff": "--- \n+++ \n@@ -714,7 +714,7 @@\n \n # print(CA)\n # print(CB)\n-ans = 0\n+ans = -INF\n for i in range(n-m+1):\n     ans = max(ans,CB[i+m] - CB[i] - (CA[i+m] - CA[i]) * i)\n "
    },
    {
      "summary": "The problem in the buggy code is that the function `solve` incorrectly uses `exit()` to terminate the program after printing \"No\" when `g` is zero, instead of returning from the function, which leads to unexpected termination of further test cases.",
      "diff": "--- \n+++ \n@@ -95,11 +95,11 @@\n     g = 0\n     for u, v in back:\n         g = gcd(g, abs(depth[u]+1-depth[v]))\n-    \n+\n     if g==0:\n         print(\"No\")\n-        exit()\n-    \n+        return \n+\n     while g%5 == 0: g //= 5\n     print(\"Yes\" if g == g & -g else \"No\")\n "
    },
    {
      "summary": "The buggy code incorrectly uses `if t==0:` to check for the base case in the recursive function `f`, when it should be checking for `if t==-1:` to terminate the recursion appropriately.",
      "diff": "--- \n+++ \n@@ -31,7 +31,7 @@\n n=I()\n A=LI()\n def f(t,l):\n-    if t==0:\n+    if t==-1:\n         return 0\n     nl1=[]\n     nl2= []"
    },
    {
      "summary": "The bug in the code is that it initializes `dp[0][0]` to 1 instead of `dp[0][D-(1<<-~d)]`, which leads to incorrect state transitions and ultimately incorrect results.",
      "diff": "--- \n+++ \n@@ -125,7 +125,7 @@\n \n D=1<<(2*d+1)\n dp=[[0]*D for i in range(n+1)]\n-dp[0][0]=1\n+dp[0][D-(1<<-~d)]=1\n for i in range(n):\n     c=a[i]\n     for b in range(D):"
    },
    {
      "summary": "The buggy code incorrectly compares the input received (variable `s`) to an integer zero (`0`) instead of the string representation of zero (`'0'`), causing the conditional check to always fail.",
      "diff": "--- \n+++ \n@@ -94,12 +94,13 @@\n     n = N()\n     left, right = 1, n\n     for i in range(20):\n+\n         p = (left + right) // 2\n         print('?', p)\n \n         s = input()\n \n-        if s == 0:\n+        if s == '0':\n             left = p\n         else:\n             right = p"
    }
  ],
  "useful_diffs_indices": [
    2,
    3
  ],
  "useful_diffs_count": 2
}