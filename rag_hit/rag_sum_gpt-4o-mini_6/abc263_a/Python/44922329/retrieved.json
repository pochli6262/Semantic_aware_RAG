{
  "task": "abc263_a/Python/44922329",
  "query_summary": "The program incorrectly loops from 0 to 11 instead of 1 to 13, causing it to miss card values that could form a Full house.",
  "oracle_summary": "The loop uses range(12) (with an extra i+=1), so it only checks values 1â€“12 and never counts 13, causing an off-by-one error.",
  "retrieved": [
    {
      "summary": "The buggy code incorrectly includes '1' in the set of valid ranks, which leads to accepting invalid card inputs that should be rejected.",
      "diff": "--- \n+++ \n@@ -2,7 +2,7 @@\n a=[]\n b=['H', 'D', 'C', 'S']\n first = set(b)\n-second = set(['A', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K'])\n+second = set(['A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K'])\n tmp = set()\n answer = \"Yes\"\n for i in range(n):"
    },
    {
      "summary": "The buggy code incorrectly iterates from index 3 to 15 instead of from 0 to 15, leading to an \"index out of range\" error if the input string has fewer than 16 characters.",
      "diff": "--- \n+++ \n@@ -1,6 +1,6 @@\n s = input()\n ans = \"Yes\"\n-for i in range(3,16):\n+for i in range(16):\n     if i %2 == 1 and s[i] != \"0\":\n         ans = \"No\"\n         break"
    },
    {
      "summary": "The buggy code incorrectly limits the range of the loop to 12 iterations instead of the necessary 40 iterations needed to correctly calculate the value of `l`.",
      "diff": "--- \n+++ \n@@ -1,8 +1,9 @@\n+\n t = int(input())\n for i in range(t):\n     n, k = map(int, input().split())\n     l = 0\n-    for i in range(12):\n+    for i in range(40):\n         l += (n // 3**i) % 3\n     if k >= l and (k - l) % 2 == 0:\n         print(\"Yes\")"
    },
    {
      "summary": "The buggy code incorrectly initializes the list `ok` with pairs starting from (0,1) instead of (1,2), which causes valid input pairs like (1,2) to be excluded.",
      "diff": "--- \n+++ \n@@ -1,5 +1,5 @@\n a,b = map(int,input().split())\n-ok = [(i,i+1) for i in range(9)]\n+ok = [(i,i+1) for i in range(1,10)]\n ok.append((1,10))\n if (a,b) in ok:\n     print(\"Yes\")"
    },
    {
      "summary": "The buggy code incorrectly checks the condition for the elements in the first row of the matrix by using a modulo operation that allows 0, instead of correctly identifying the elements that should not be divisible by 7.",
      "diff": "--- \n+++ \n@@ -5,7 +5,7 @@\n for i in range(m-1):\n     if b[0][i]+1 != b[0][i+1]:\n         ans = False\n-    if b[0][i]%7+1 != b[0][i+1]%7:\n+    if b[0][i]%7 == 0:\n         ans = False\n     \n for i in range(n-1):"
    }
  ],
  "useful_diffs_indices": [
    1,
    3
  ],
  "useful_diffs_count": 2
}