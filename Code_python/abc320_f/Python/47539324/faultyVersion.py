#!/usr/bin/env python3
import sys


def solve(N: int, H: int, X: "list[int]", P: "list[int]", F: "list[int]"):
    INF = 99
    L = []
    cur = 0
    for i in range(N):
        L.append(X[i]-cur)
        cur = X[i]
    dp = [[[INF]*(H+1) for _ in range(H+1)] for _ in range(N+1)]
    P.append(0)
    F.append(0)
    for i in range(H+1):
        dp[0][H][i] = 0
    
    for i in range(N):
        for j in range(H+1):
            for k in range(H+1):
                if dp[i][j][k] == INF:
                    continue
                if j-L[i] < 0 or k+L[i] > H:
                    continue
                # 往路で利用するとき
                dp[i+1][min(j-L[i]+F[i], H)][k+L[i]] = min(dp[i][j][k]+P[i], dp[i+1][min(j-L[i]+F[i], H)][k+L[i]])
                # 復路で利用するとき
                if k+L[i] == H:
                    for l in range(F[i]+1):
                        if 0 <= k+L[i]-l:
                            dp[i+1][j-L[i]][k+L[i]-l] = min(dp[i][j][k]+P[i], dp[i+1][j-L[i]][k+L[i]-l])
                else:
                    if 0 <= k+L[i]-F[i]:
                        dp[i+1][j-L[i]][k+L[i]-F[i]] = min(dp[i][j][k]+P[i], dp[i+1][j-L[i]][k+L[i]-F[i]])

                # どちらも利用しないとき
                dp[i+1][j-L[i]][k+L[i]] = min(dp[i][j][k], dp[i+1][j-L[i]][k+L[i]])

    ans = INF
    for i in range(H+1):
        ans = min(ans, dp[N][i][i])
    if ans == INF:
        print(-1)
    else:
        print(ans)
    
    return


# Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    H = int(next(tokens))  # type: int
    X = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    P = [int()] * (N - 1)  # type: "List[int]"
    F = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        P[i] = int(next(tokens))
        F[i] = int(next(tokens))
    solve(N, H, X, P, F)

if __name__ == '__main__':
    main()
